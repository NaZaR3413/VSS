@page "/account/forgot-password"
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient

<div class="container">
    <div class="row justify-content-center">
        <div class="card mt-3 shadow-sm rounded">
            <div class="card-body p-5">
                <h4>Forgot Password</h4>
                <form method="post" class="mt-4" @onsubmit="SendResetLink">
                    <p>Enter your email address and we will send you a link to reset your password.</p>
                    
                    <div class="mb-3">
                        <label class="form-label" for="Email">Email</label>
                        <InputText @bind-Value="forgotPasswordModel.EmailAddress" class="form-control" id="Email" />
                        <ValidationMessage For="@(() => forgotPasswordModel.EmailAddress)" class="text-danger" />
                    </div>
                    
                    <div class="d-grid gap-2">
                        <button type="submit" class="btn btn-primary mt-2 mb-3 vss-submit-button" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span> Sending...</span>
                            }
                            else
                            {
                                <span>Submit</span>
                            }
                        </button>
                    </div>
                    
                    <a href="/account/login" class="text-decoration-none">
                        <i class="fa fa-long-arrow-left"></i> Login
                    </a>
                </form>
                
                @if (isSuccess)
                {
                    <div class="alert alert-success mt-3">
                        <p>Password reset link has been sent to your email if it exists in our system.</p>
                    </div>
                }
                
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mt-3">
                        @errorMessage
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private class ForgotPasswordModel
    {
        [Required(ErrorMessage = "Email address is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string EmailAddress { get; set; } = string.Empty;
    }
    
    private ForgotPasswordModel forgotPasswordModel = new ForgotPasswordModel();
    private bool isLoading = false;
    private bool isSuccess = false;
    private string errorMessage = string.Empty;
    
    [Parameter]
    [SupplyParameterFromQuery(Name = "returnUrl")]
    public string ReturnUrl { get; set; } = string.Empty;
    
    [Parameter]
    [SupplyParameterFromQuery(Name = "returnUrlHash")]
    public string ReturnUrlHash { get; set; } = string.Empty;
    
    private async Task SendResetLink()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            
            // Get the base address for the API
            var apiBaseUrl = "https://vss-backend-api-fmbjgachhph9byce.westus2-01.azurewebsites.net";
            
            // Prepare the forgot password request
            var forgotPasswordRequest = new
            {
                email = forgotPasswordModel.EmailAddress,
                appName = "web_backend",
                returnUrl = ReturnUrl,
                returnUrlHash = ReturnUrlHash
            };
            
            // Make the forgot password request
            var response = await HttpClient.PostAsJsonAsync($"{apiBaseUrl}/api/account/forgot-password", forgotPasswordRequest);
            
            // Always show success (for security reasons, regardless of whether the email exists)
            isSuccess = true;
            
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred. Please try again later.";
            await JSRuntime.InvokeVoidAsync("console.error", "Forgot password error: " + ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}