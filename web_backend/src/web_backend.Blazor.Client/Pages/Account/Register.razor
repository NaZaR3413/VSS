@page "/account/register"
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient

<div class="container">
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
    <div class="row justify-content-center">        
        <div class="card vss-register-card">
            <div class="card-body p-5">
                <!-- Logo -->
                <a href="/">
                    <img class="vss-register-img" src="/images/varsitylogoempty.jpg" alt="VSS Logo" />
                </a>

                <h4>Register</h4>
                <strong>
                    Already registered?
                    <a href="/account/login" class="text-decoration-none">Login</a>
                </strong>
                
                <EditForm Model="@registerModel" OnValidSubmit="RegisterUser" class="mt-4">
                    <DataAnnotationsValidator />

                    <!-- Name -->
                    <div class="mb-3">
                        <label class="form-label" for="Name">Name<span> * </span></label>
                        <InputText @bind-Value="registerModel.Name" class="form-control" id="Name" />
                        <ValidationMessage For="@(() => registerModel.Name)" class="text-danger" />
                    </div>

                    <!-- Phone Number -->
                    <div class="mb-3">
                        <label class="form-label" for="PhoneNumber">Phone Number <span class="text-muted">(Optional)</span></label>
                        <InputText @bind-Value="registerModel.PhoneNumber" class="form-control" type="tel" maxlength="256" id="PhoneNumber" />
                        <ValidationMessage For="@(() => registerModel.PhoneNumber)" class="text-danger" />
                    </div> 

                    <!-- Username -->
                    <div class="mb-3">
                        <label class="form-label" for="UserName">Username<span> * </span></label>
                        <InputText @bind-Value="registerModel.UserName" class="form-control" id="UserName" />
                        <ValidationMessage For="@(() => registerModel.UserName)" class="text-danger" />
                    </div>

                    <!-- Email Address -->
                    <div class="mb-3">
                        <label class="form-label" for="EmailAddress">Email address<span> * </span></label>
                        <InputText @bind-Value="registerModel.EmailAddress" class="form-control" type="email" id="EmailAddress" />
                        <ValidationMessage For="@(() => registerModel.EmailAddress)" class="text-danger" />
                    </div>

                    <!-- Password -->
                    <div class="mb-3">
                        <label class="form-label" for="Password">Password<span> * </span></label>
                        <InputText @bind-Value="registerModel.Password" class="form-control" type="password" id="Password" />
                        <ValidationMessage For="@(() => registerModel.Password)" class="text-danger" />

                        <div>
                            <small class="text-muted">✓ Must be at least 6 characters long.</small><br />
                            <small class="text-muted">✓ Must have at least one special character (e.g., &#64;, #, $, etc.).</small><br />
                            <small class="text-muted">✓ Must have at least one number (0-9).</small><br />
                            <small class="text-muted">✓ Must have at least one lowercase letter.</small><br />
                            <small class="text-muted">✓ Must have at least one uppercase letter.</small>
                        </div>
                    </div>

                    <!-- Confirm Password -->
                    <div class="mb-3">
                        <label class="form-label" for="ConfirmPassword">Confirm Password</label>
                        <InputText @bind-Value="registerModel.ConfirmPassword" class="form-control" type="password" id="ConfirmPassword" />
                        <ValidationMessage For="@(() => registerModel.ConfirmPassword)" class="text-danger" />
                    </div>

                    <!-- Terms and Conditions Checkbox -->
                    <div class="mb-3 form-check">
                        <InputCheckbox @bind-Value="registerModel.AcceptTerms" class="form-check-input border-dark" id="AcceptTerms" />
                        <label class="form-check-label" for="AcceptTerms">
                            I accept the <a href="/TermsConditions" target="_blank">Terms and Conditions</a>
                        </label>
                        <ValidationMessage For="@(() => registerModel.AcceptTerms)" class="text-danger" />
                    </div>

                    <div class="d-grid gap-2">
                        <button type="submit" class="btn-lg mt-4 btn btn-primary vss-register-button" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span> Processing...</span>
                            }
                            else
                            {
                                <span>Register</span>
                            }
                        </button>
                    </div>
                </EditForm>              
            </div>
        </div>        
    </div>
    <br />
</div>

@code {
    private class RegisterModel
    {
        [Required(ErrorMessage = "Name is required")]
        public string Name { get; set; } = string.Empty;
        
        public string? PhoneNumber { get; set; }
        
        [Required(ErrorMessage = "Username is required")]
        public string UserName { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Email address is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string EmailAddress { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be at least 6 characters long")]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{6,}$", 
            ErrorMessage = "Password must include at least one uppercase letter, one lowercase letter, one number, and one special character")]
        public string Password { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Confirm password is required")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "You must accept the terms and conditions")]
        [Range(typeof(bool), "true", "true", ErrorMessage = "You must accept the terms and conditions")]
        public bool AcceptTerms { get; set; }
    }
    
    private RegisterModel registerModel = new RegisterModel();
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    
    [Parameter]
    [SupplyParameterFromQuery(Name = "returnUrl")]
    public string ReturnUrl { get; set; } = string.Empty;
    
    [Parameter]
    [SupplyParameterFromQuery(Name = "returnUrlHash")]
    public string ReturnUrlHash { get; set; } = string.Empty;
    
    protected override void OnInitialized()
    {
        // If no return URL is specified, default to the landing page
        if (string.IsNullOrEmpty(ReturnUrl))
        {
            ReturnUrl = "/landing";
        }
    }
    
    private async Task RegisterUser()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            
            // Get the base address for the API
            var apiBaseUrl = "https://vss-backend-api-fmbjgachhph9byce.westus2-01.azurewebsites.net";
            
            // Prepare the registration request
            var registerRequest = new
            {
                userName = registerModel.UserName,
                emailAddress = registerModel.EmailAddress,
                password = registerModel.Password,
                appName = "web_backend",
                name = registerModel.Name,
                phoneNumber = registerModel.PhoneNumber,
                acceptTerms = registerModel.AcceptTerms,
                returnUrl = ReturnUrl,
                returnUrlHash = ReturnUrlHash
            };
            
            // Make the registration request
            var response = await HttpClient.PostAsJsonAsync($"{apiBaseUrl}/api/account/register", registerRequest);
            
            if (response.IsSuccessStatusCode)
            {
                // If registration successful, redirect to login
                await JSRuntime.InvokeVoidAsync("console.log", "Registration successful, redirecting to login page");
                Navigation.NavigateTo($"/account/login?returnUrl={Uri.EscapeDataString(ReturnUrl)}", forceLoad: false);
            }
            else
            {
                // Handle registration failure
                var content = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("console.error", "Registration failed: " + content);
                
                if (content.Contains("is already taken"))
                {
                    errorMessage = "Username or email address is already in use. Please try another.";
                }
                else
                {
                    errorMessage = "Registration failed. Please check your information and try again.";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during registration. Please try again.";
            await JSRuntime.InvokeVoidAsync("console.error", "Registration error: " + ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}