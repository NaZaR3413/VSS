@page "/Account/Register"
@using System.ComponentModel.DataAnnotations
@using web_backend
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using OpenIddict.Abstractions
@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime

<div class="vss-page vss-page-layout--centered">
    <div class="vss-auth-container">
        <div class="vss-auth-form">
            <h2 class="text-center mb-4">Create a New Account</h2>

            @if (showErrorMessage)
            {
                <div class="alert alert-danger">
                    <p>@errorMessage</p>
                </div>
            }

            <EditForm Model="@registerModel" OnValidSubmit="RegisterUser">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="username" class="form-label">Username</label>
                    <InputText id="username" @bind-Value="registerModel.UserName" class="form-control" />
                    <ValidationMessage For="@(() => registerModel.UserName)" />
                </div>

                <div class="mb-3">
                    <label for="email" class="form-label">Email</label>
                    <InputText id="email" @bind-Value="registerModel.Email" class="form-control" />
                    <ValidationMessage For="@(() => registerModel.Email)" />
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <InputText id="password" type="password" @bind-Value="registerModel.Password" class="form-control" />
                    <ValidationMessage For="@(() => registerModel.Password)" />
                </div>

                <div class="mb-3">
                    <label for="confirmPassword" class="form-label">Confirm Password</label>
                    <InputText id="confirmPassword" type="password" @bind-Value="registerModel.ConfirmPassword" class="form-control" />
                    <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
                </div>

                <div class="d-grid gap-2">
                    <button type="submit" class="vss-auth__button btn" disabled="@isRegistering">
                        @if (isRegistering)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span class="ms-1">Creating Account...</span>
                        }
                        else
                        {
                            <span>Register</span>
                        }
                    </button>
                </div>

                <hr />

                <div class="text-center mt-3">
                    <p>Already have an account? <a href="authentication/login" class="vss-auth__link">Log in here</a></p>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private RegisterModel registerModel = new RegisterModel();
    private bool isRegistering = false;
    private bool showErrorMessage = false;
    private string errorMessage = string.Empty;

    private async Task RegisterUser()
    {
        isRegistering = true;
        showErrorMessage = false;
        errorMessage = string.Empty;

        try
        {
            var client = HttpClientFactory.CreateClient("API");
            var response = await client.PostAsJsonAsync("/api/account/register", registerModel);

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("console.log", "Registration successful");
                Navigation.NavigateTo("authentication/login?registrationSuccess=true");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("console.error", $"Registration failed: {errorContent}");
                
                errorMessage = "Registration failed. Please check your information and try again.";
                showErrorMessage = true;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error during registration: {ex.Message}");
            errorMessage = $"An error occurred during registration: {ex.Message}";
            showErrorMessage = true;
        }
        finally
        {
            isRegistering = false;
        }
    }

    public class RegisterModel
    {
        [Required]
        [StringLength(100, ErrorMessage = "Username must be between 4 and 100 characters.", MinimumLength = 4)]
        public string UserName { get; set; } = string.Empty;

        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        [StringLength(100, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,}$", 
            ErrorMessage = "Password must include at least one uppercase letter, one lowercase letter, one number, and one special character.")]
        public string Password { get; set; } = string.Empty;

        [Required]
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}