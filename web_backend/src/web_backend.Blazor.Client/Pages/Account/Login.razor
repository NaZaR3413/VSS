@page "/account/login"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Volo.Abp.Identity
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.WebUtilities
@using System.Text
@using System.Text.Encodings.Web
@using System.Net.Http.Json
@using web_backend.Blazor.Client.Services
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="container">
    <div class="row justify-content-center">
        <div class="card vss-login-card">
            <!-- Logo -->
            <img class="vss-img" src="/images/varsitylogoempty.jpg" alt="VSS Logo" />
            <h4>Login</h4>

            <div class="card-body" style="text-align:center;">
                <strong>
                    Are you a new user?
                    <a href="/account/register" class="text-decoration-none">Register</a>
                </strong>
                
                <EditForm Model="@loginModel" OnValidSubmit="LoginUser" class="mt-4">
                    <DataAnnotationsValidator />

                    <div class="mb-3 vss-login-layout">
                        <label class="form-label">Username or Email Address</label>
                        <InputText @bind-Value="loginModel.UserNameOrEmailAddress" class="form-control" />
                        <ValidationMessage For="@(() => loginModel.UserNameOrEmailAddress)" class="text-danger" />
                    </div>

                    <div class="mb-3 vss-login-layout">
                        <label class="form-label">Password</label>
                        <div class="input-group">
                            <InputText type="password" @bind-Value="loginModel.Password" class="form-control" autocomplete="new-password" maxlength="256" />
                            <button class="btn btn-secondary" type="button" id="PasswordVisibilityButton"><i class="fa fa-eye-slash" aria-hidden="true"></i></button>
                        </div>
                        <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
                    </div>
                    
                    <div class="row">
                        <div class="col vss-login-layout">
                            <div class="form-check">
                                <InputCheckbox @bind-Value="loginModel.RememberMe" class="form-check-input mb-4 border-dark" id="rememberMe" />
                                <label class="form-check-label" for="rememberMe">
                                    Remember Me
                                </label>
                            </div>
                        </div>
                        <div class="col text-end vss-login-layout">
                            <a href="/account/forgot-password">Forgot Password</a>
                        </div>
                    </div>
                    
                    <div class="text-center">
                        <button type="submit" class="btn btn-primary btn-lg mt-3 vss-submit-button" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span> Loading...</span>
                            }
                            else
                            {
                                <span>Login</span>
                            }
                        </button>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-3">
                            @errorMessage
                        </div>
                    }
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private class LoginModel
    {
        [Required(ErrorMessage = "Username or email is required")]
        public string UserNameOrEmailAddress { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
        
        public bool RememberMe { get; set; }
    }
    
    private LoginModel loginModel = new LoginModel();
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private string passwordInputType = "password";
    
    [Parameter]
    [SupplyParameterFromQuery(Name = "returnUrl")]
    public string ReturnUrl { get; set; } = string.Empty;
    
    [Parameter]
    [SupplyParameterFromQuery(Name = "returnUrlHash")]
    public string ReturnUrlHash { get; set; } = string.Empty;
    
    protected override async Task OnInitializedAsync()
    {
        // If no return URL is specified, default to the landing page
        if (string.IsNullOrEmpty(ReturnUrl))
        {
            ReturnUrl = "/landing";
        }
        
        // Apply eye icon toggling via JavaScript
        await JSRuntime.InvokeVoidAsync("eval", @"
            document.getElementById('PasswordVisibilityButton')?.addEventListener('click', function() {
                var passwordInput = document.querySelector('input[type=""password""]');
                if (passwordInput) {
                    if (passwordInput.type === 'password') {
                        passwordInput.type = 'text';
                        this.querySelector('i').classList.remove('fa-eye-slash');
                        this.querySelector('i').classList.add('fa-eye');
                    } else {
                        passwordInput.type = 'password';
                        this.querySelector('i').classList.remove('fa-eye');
                        this.querySelector('i').classList.add('fa-eye-slash');
                    }
                }
            });
        ");
    }
    
    private void TogglePasswordVisibility()
    {
        if (passwordInputType == "password")
        {
            passwordInputType = "text";
        }
        else
        {
            passwordInputType = "password";
        }
    }
    
    private async Task LoginUser()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            
            // Get the base address for the API
            var apiBaseUrl = "https://vss-backend-api-fmbjgachhph9byce.westus2-01.azurewebsites.net";
            
            // First try the token endpoint directly for OpenID Connect flow
            var tokenRequest = new FormUrlEncodedContent(new Dictionary<string, string>
            {
                ["grant_type"] = "password",
                ["client_id"] = "web_backend_Blazor",
                ["client_secret"] = "1q2w3e*",
                ["username"] = loginModel.UserNameOrEmailAddress,
                ["password"] = loginModel.Password,
                ["scope"] = "openid profile email web_backend"
            });
            
            var tokenResponse = await HttpClient.PostAsync($"{apiBaseUrl}/connect/token", tokenRequest);
            
            if (tokenResponse.IsSuccessStatusCode)
            {
                // Parse the token response
                var tokenContent = await tokenResponse.Content.ReadFromJsonAsync<TokenResponse>();
                if (tokenContent != null)
                {
                    // Store the tokens in local storage
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "access_token", tokenContent.AccessToken);
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "refresh_token", tokenContent.RefreshToken);
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "token_expiry", DateTime.UtcNow.AddSeconds(tokenContent.ExpiresIn).ToString("o"));
                    
                    // Set the Authorization header for subsequent requests
                    await JSRuntime.InvokeVoidAsync("eval", 
                        $"window.TokenInterceptor = {{ accessToken: '{tokenContent.AccessToken}' }}");
                    
                    // Notify the auth state provider that the state has changed
                    if (AuthenticationStateProvider is TokenAuthenticationStateProvider tokenAuthProvider)
                    {
                        tokenAuthProvider.NotifyAuthenticationStateChanged();
                    }
                    
                    // Log success
                    await JSRuntime.InvokeVoidAsync("console.log", "Login successful via token endpoint");
                    
                    // Reload the page to refresh authentication state
                    var redirectUrl = string.IsNullOrEmpty(ReturnUrl) ? "/landing" : ReturnUrl;
                    if (!string.IsNullOrEmpty(ReturnUrlHash))
                    {
                        redirectUrl += "#" + ReturnUrlHash;
                    }
                    
                    // Force reload to ensure authentication state is refreshed
                    await JSRuntime.InvokeVoidAsync("console.log", "Redirecting to: " + redirectUrl);
                    Navigation.NavigateTo(redirectUrl, forceLoad: true);
                    return;
                }
            }
            
            // Fallback to the regular login endpoint if token endpoint fails
            var loginRequest = new
            {
                userNameOrEmailAddress = loginModel.UserNameOrEmailAddress,
                password = loginModel.Password,
                rememberMe = loginModel.RememberMe,
                returnUrl = ReturnUrl,
                returnUrlHash = ReturnUrlHash
            };
            
            var response = await HttpClient.PostAsJsonAsync($"{apiBaseUrl}/api/account/login", loginRequest);
            
            if (response.IsSuccessStatusCode)
            {
                // Try to extract authentication info from response
                try
                {
                    var loginResponse = await response.Content.ReadFromJsonAsync<LoginResult>();
                    if (loginResponse != null && !string.IsNullOrEmpty(loginResponse.Token))
                    {
                        // Store the token
                        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "access_token", loginResponse.Token);
                        
                        // Set the Authorization header for subsequent requests
                        await JSRuntime.InvokeVoidAsync("eval", 
                            $"window.TokenInterceptor = {{ accessToken: '{loginResponse.Token}' }}");
                        
                        // Notify the auth state provider that the state has changed
                        if (AuthenticationStateProvider is TokenAuthenticationStateProvider tokenAuthProvider)
                        {
                            tokenAuthProvider.NotifyAuthenticationStateChanged();
                        }
                            
                        await JSRuntime.InvokeVoidAsync("console.log", "Login successful via account endpoint");
                    }
                }
                catch (Exception ex)
                {
                    await JSRuntime.InvokeVoidAsync("console.error", "Error processing login response: " + ex.Message);
                }
                
                // Redirect to the return URL
                var redirectUrl = string.IsNullOrEmpty(ReturnUrl) ? "/landing" : ReturnUrl;
                if (!string.IsNullOrEmpty(ReturnUrlHash))
                {
                    redirectUrl += "#" + ReturnUrlHash;
                }
                
                // Force reload to ensure authentication state is refreshed
                await JSRuntime.InvokeVoidAsync("console.log", "Redirecting to: " + redirectUrl);
                Navigation.NavigateTo(redirectUrl, forceLoad: true);
            }
            else
            {
                // Handle login failure
                var content = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("console.error", "Login failed: " + content);
                errorMessage = "Invalid username or password. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during login. Please try again.";
            await JSRuntime.InvokeVoidAsync("console.error", "Login error: " + ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private class TokenResponse
    {
        [System.Text.Json.Serialization.JsonPropertyName("access_token")]
        public string AccessToken { get; set; } = string.Empty;
        
        [System.Text.Json.Serialization.JsonPropertyName("refresh_token")]
        public string RefreshToken { get; set; } = string.Empty;
        
        [System.Text.Json.Serialization.JsonPropertyName("expires_in")]
        public int ExpiresIn { get; set; }
        
        [System.Text.Json.Serialization.JsonPropertyName("token_type")]
        public string TokenType { get; set; } = string.Empty;
    }
    
    private class LoginResult
    {
        [System.Text.Json.Serialization.JsonPropertyName("token")]
        public string Token { get; set; } = string.Empty;
        
        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string UserId { get; set; } = string.Empty;
    }
}