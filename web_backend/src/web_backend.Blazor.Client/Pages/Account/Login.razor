@page "/Account/Login"
@using Microsoft.Extensions.Configuration
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h3 class="m-0">Login</h3>
                </div>
                <div class="card-body">
                    <p class="text-center mb-4">
                        You will be redirected to the authentication server to login...
                    </p>
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "returnUrl")]
    public string ReturnUrl { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        await JS.InvokeVoidAsync("console.log", "Login page loaded");
        
        // Get the API base URL from configuration
        var apiBaseUrl = Configuration
            .GetSection("RemoteServices")
            .GetSection("Default")
            .GetValue<string>("BaseUrl") ?? "https://vss-backend-api-fmbjgachhph9byce.westus2-01.azurewebsites.net";
            
        // For Blazor WASM, we need to use the OIDC protocol for authentication
        var clientReturnUrl = string.IsNullOrEmpty(ReturnUrl) 
            ? $"{NavigationManager.BaseUri}authentication/login-callback"
            : ReturnUrl;
            
        var encodedClientReturnUrl = Uri.EscapeDataString(clientReturnUrl);
        
        // Generate OIDC authorization URL with parameters
        var loginUrl = $"{apiBaseUrl}/connect/authorize?client_id=web_backend_Blazor&redirect_uri={encodedClientReturnUrl}&response_type=code&scope=web_backend%20roles%20email%20phone%20openid%20profile&state={Guid.NewGuid()}";
        
        await JS.InvokeVoidAsync("console.log", $"Redirecting to: {loginUrl}");
        
        // Redirect to the authorization server
        NavigationManager.NavigateTo(loginUrl, forceLoad: true);
    }
}