@page "/"
@using System.Net.Http.Json
@using web_backend.Livestreams
@using web_backend.Enums

<div class="vss-page vss-page-layout--default">
    <main class="vss-main">
        <div class="container">
            <!-- HERO SECTION -->
            <section class="vss-hero text-center mb-5">
                <h1 class="display-4 fw-bold">Varsity Sports Show</h1>
                <p class="lead">Your home for Arizona high school sports – live, on-demand, and in-depth.</p>
            </section>

            @if (!string.IsNullOrEmpty(VideoUrl))
            {
                <!-- FEATURED GAME -->
                <section class="vss-featured mb-5 p-4 bg-white rounded shadow-sm">
                    <h2 class="text-start mb-4 border-bottom pb-2">Featured Game</h2>
                    <div class="row align-items-center g-4">
                        <div class="col-lg-7">
                            <div class="vss-video-container position-relative">
                                @if (IsLive)
                                {
                                    <span class="badge bg-danger position-absolute top-0 start-0 m-2">LIVE</span>
                                }
                                <video id="videoPlayer" class="vss-video-player" controls autoplay></video>

                                @if (ShowPreviewOverlay)
                                {
                                    <div class="vss-preview-overlay d-flex flex-column justify-content-center align-items-center">
                                        <h4>Subscribe to Watch the Full Stream</h4>
                                        <p class="mb-3">You’ve reached the end of the preview.</p>
                                        <a class="vss-auth__button" href="/account/login">Log In / Subscribe</a>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="col-lg-5">
                            <h3 class="fw-bold">@StreamTitle</h3>
                            <p class="text-muted">Streaming Now</p>
                            <a class="vss-auth__button" href="/livestream/@FeaturedStreamId">Watch Full Stream</a>
                        </div>
                    </div>
                </section>
            }

            <!-- UPCOMING GAMES -->
            <section id="livestreams" class="mb-5">
                <h2 class="text-start mb-3">Upcoming Live Streams</h2>
                <div class="row row-cols-1 row-cols-md-2 g-4">
                    <div class="col">
                        <div class="vss-livestream-item">
                            <h2>Chandler Wolves vs. Hamilton Huskies</h2>
                            <p>Sat, 4/10 @@ 6:00 PM</p>
                            <a class="vss-auth__button" href="/livestreams/chandler-vs-hamilton">Watch Live</a>
                        </div>
                    </div>
                    <div class="col">
                        <div class="vss-livestream-item">
                            <h2>Saguaro Sabercats vs. Basha Bears</h2>
                            <p>Sun, 4/11 @@ 5:30 PM</p>
                            <a class="vss-auth__button" href="/livestreams/saguaro-vs-basha">Watch Live</a>
                        </div>
                    </div>
                </div>
            </section>

            <!-- SCORES SECTION -->
            <section class="mb-5">
                <h2 class="text-start mb-3">Recent Scores</h2>
                <div class="row row-cols-1 row-cols-md-2 g-3">
                    <div class="col">
                        <div class="vss-score-card">
                            <p class="mb-1"><strong>Mesquite 35</strong> - 27 Higley</p>
                            <p class="text-muted mb-0">Final - April 5</p>
                        </div>
                    </div>
                    <div class="col">
                        <div class="vss-score-card">
                            <p class="mb-1"><strong>Centennial 24</strong> - 30 Liberty</p>
                            <p class="text-muted mb-0">Final - April 5</p>
                        </div>
                    </div>
                </div>
            </section>

            <!-- NEWS + ARTICLES -->
            <section class="mb-5">
                <h2 class="text-start mb-3">Latest News</h2>
                <div class="row row-cols-1 row-cols-md-2 g-4">
                    <div class="col">
                        <div class="vss-news-card">
                            <h5>Top 10 Plays of the Week</h5>
                            <p class="text-muted">April 6, 2025</p>
                            <p>Relive the best touchdowns, buzzer-beaters, and highlight reels from this week's action across Arizona high school sports.</p>
                            <a class="vss-auth__link" href="/news/top-plays">Read More →</a>
                        </div>
                    </div>
                    <div class="col">
                        <div class="vss-news-card">
                            <h5>Power Rankings: Week 4</h5>
                            <p class="text-muted">April 6, 2025</p>
                            <p>Who’s rising, who’s falling? See where your team stands in the latest rankings from our VSS analysts.</p>
                            <a class="vss-auth__link" href="/news/power-rankings">Read More →</a>
                        </div>
                    </div>
                </div>
            </section>
        </div>
    </main>
</div>

@code {
    [Inject] protected HttpClient HttpClient { get; set; }
    [Inject] protected IJSRuntime JS { get; set; }

    protected string VideoUrl { get; set; } = string.Empty;
    protected string StreamTitle { get; set; } = string.Empty;
    protected Guid FeaturedStreamId { get; set; }
    protected StreamStatus? FeaturedStreamStatus { get; set; }

    private bool shouldInitializeVideoPlayer = false;
    private bool ShowPreviewOverlay = false;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Initializing landing page...");
        await LoadFeaturedStreamAsync();
        Console.WriteLine($"Finished loading stream. URL: {VideoUrl}");

        if (!string.IsNullOrEmpty(VideoUrl))
        {
            shouldInitializeVideoPlayer = true;
            StateHasChanged();
        }
    }

    [JSInvokable("showPreviewOverlay")]
    public async Task ShowPreviewOverlayFromJs()
    {
        ShowPreviewOverlay = true;
        await JS.InvokeVoidAsync("pauseAndDisableVideo", "videoPlayer");
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldInitializeVideoPlayer && !string.IsNullOrEmpty(VideoUrl))
        {
            shouldInitializeVideoPlayer = false;
            await JS.InvokeVoidAsync("loadHlsStream", VideoUrl, "videoPlayer");
            await JS.InvokeVoidAsync("invokeDotNetAfterDelay", DotNetObjectReference.Create(this), "showPreviewOverlay", 30000);
        }
    }

    private async Task LoadFeaturedStreamAsync()
    {
        try
        {
            HttpClient.BaseAddress = new Uri("https://localhost:44356/");
            var streams = await HttpClient.GetFromJsonAsync<List<LivestreamDto>>("api/livestreams");

            var featured = streams?
                .Where(s => s.StreamStatus == StreamStatus.Live && !string.IsNullOrWhiteSpace(s.HlsUrl))
                .OrderByDescending(s => s.Id)
                .FirstOrDefault();

            if (featured != null)
            {
                VideoUrl = featured.HlsUrl;
                FeaturedStreamId = featured.Id;
                FeaturedStreamStatus = featured.StreamStatus;
                StreamTitle = $"{featured.HomeTeam} {featured.HomeScore} - {featured.AwayScore} {featured.AwayTeam}";

                await JS.InvokeVoidAsync("loadHlsStream", VideoUrl, "videoPlayer");
            }
            else
            {
                StreamTitle = "No live stream currently available.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading featured stream: {ex.Message}");
            StreamTitle = "Error loading featured stream.";
        }
    }

    protected bool IsLive => FeaturedStreamStatus == StreamStatus.Live;
}
