@page "/landing"
@using System.Net.Http.Json
@using web_backend.Livestreams
@using web_backend.Enums
@inject ILivestreamAppService LivestreamService
@inject IJSRuntime JS
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<div class="vss-page vss-page-layout--default">
    <main class="vss-main">
        <div class="container">
            <!-- HERO SECTION -->
            <section class="vss-hero text-center mb-5">
                <h1 class="display-4 fw-bold">Varsity Sports Show</h1>
                <p class="lead">Your home for high school and college sports – live, on-demand, and in-depth.</p>
            </section>

            <!-- UPCOMING GAMES -->
            <section id="livestreams" class="mb-5">
                <h2 class="text-start mb-3">Upcoming Live Streams</h2>
                <div class="row row-cols-1 row-cols-md-2 g-4">
                    @if (upcomingGames != null && upcomingGames.Any())
                    {
                        @foreach (var game in upcomingGames)
                        {
                            <div class="col">
                                <div class="vss-livestream-item">
                                    <h2>@game.HomeTeam vs. @game.AwayTeam</h2>
                                    <p>@game.EventDate.ToString("ddd, M/d") at @game.EventDate.ToString("h:mm tt")</p>
                                    <a class="vss-auth__button" href="/livestream/@game.Id">Watch Live</a>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="col">
                            <div class="vss-livestream-item">
                                <h2>No upcoming games scheduled</h2>
                                <p>Check back soon for new game announcements</p>
                            </div>
                        </div>
                    }
                </div>
            </section>

            <!-- SCORES SECTION -->
            <section class="mb-5">
                <h2 class="text-start mb-3">Recent Scores</h2>
                <div class="row row-cols-1 row-cols-md-2 g-4">
                    @if (recentScores != null && recentScores.Any())
                    {
                        @foreach (var game in recentScores)
                        {
                            <div class="col">
                                <div class="vss-score-card">
                                    <div class="vss-score-card-header">
                                        <span class="vss-score-date">@game.EventDate.ToString("MMM d, yyyy")</span>
                                        <span class="vss-score-badge">@game.EventType</span>
                                    </div>
                                    <div class="vss-score-teams">
                                        <div class="vss-score-team @(game.HomeScore > game.AwayScore ? "vss-score-winner" : "")">
                                            <div class="vss-team-name">@game.HomeTeam</div>
                                            <div class="vss-team-score">@game.HomeScore</div>
                                        </div>
                                        <div class="vss-score-divider">
                                            <span>VS</span>
                                        </div>
                                        <div class="vss-score-team @(game.AwayScore > game.HomeScore ? "vss-score-winner" : "")">
                                            <div class="vss-team-name">@game.AwayTeam</div>
                                            <div class="vss-team-score">@game.AwayScore</div>
                                        </div>
                                    </div>
                                    <div class="vss-score-footer">
                                        <span class="vss-score-status">Final</span>
                                        <a href="/livestream/@game.Id" class="vss-score-replay-link">
                                            <i class="bi bi-play-circle"></i> Watch Replay
                                        </a>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="col-12">
                            <div class="vss-empty-scores">
                                <div class="vss-empty-scores-icon">
                                    <i class="bi bi-calendar2-x"></i>
                                </div>
                                <h4>No Recent Games</h4>
                                <p>Check back soon for game results and highlights</p>
                            </div>
                        </div>
                    }
                </div>
            </section>

            <!-- SOCIAL MEDIA SECTION -->
            <section class="mb-5">
                <h2 class="text-start mb-3">Follow Us on Instagram</h2>
                <div class="row">
                    <div class="col-12">
                        <div class="vss-social-card p-3 bg-white rounded shadow-sm">
                            <div style="height: 600px; overflow: hidden;">
                                <iframe 
                                    src="https://www.instagram.com/varsitysportsshow/embed" 
                                    allowtransparency="true" 
                                    allowfullscreen="true" 
                                    scrolling="no" 
                                    frameborder="0"
                                    style="width: 100%; height: 100%; border: none; overflow: hidden;"
                                    allow="encrypted-media;">
                                </iframe>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        </div>
    </main>
</div>

@code {
    protected string VideoUrl { get; set; } = string.Empty;
    protected string StreamTitle { get; set; } = string.Empty;
    protected string StreamStatusText { get; set; } = "Streaming Now";
    protected Guid FeaturedStreamId { get; set; }
    protected StreamStatus? FeaturedStreamStatus { get; set; }

    private bool shouldInitializeVideoPlayer = false;
    private bool ShowPreviewOverlay = false;
    private List<LivestreamDto> upcomingGames = new List<LivestreamDto>();
    private List<LivestreamDto> recentScores = new List<LivestreamDto>();

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Initializing landing page...");
        await LoadFeaturedStreamAsync();
        await LoadUpcomingGamesAsync();
        await LoadRecentScoresAsync();
        Console.WriteLine($"Finished loading stream. URL: {VideoUrl}");

        if (!string.IsNullOrEmpty(VideoUrl))
        {
            shouldInitializeVideoPlayer = true;
            StateHasChanged();
        }
    }

    [JSInvokable("showPreviewOverlay")]
    public async Task ShowPreviewOverlayFromJs()
    {
        ShowPreviewOverlay = true;
        await JS.InvokeVoidAsync("pauseAndDisableVideo", "videoPlayer");
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldInitializeVideoPlayer && !string.IsNullOrEmpty(VideoUrl))
        {
            shouldInitializeVideoPlayer = false;
            await JS.InvokeVoidAsync("console.log", $"Initializing video player with URL: {VideoUrl}");
            await JS.InvokeVoidAsync("loadHlsStream", VideoUrl, "videoPlayer");

            // Show preview overlay after 30 seconds for non-subscribed users
            await JS.InvokeVoidAsync("invokeDotNetAfterDelay", DotNetObjectReference.Create(this), "showPreviewOverlay", 30000);
        }
    }

    private async Task LoadFeaturedStreamAsync()
    {
        try
        {
            List<LivestreamDto> allStreams = null;
            LivestreamDto featuredStream = null;

            // First try using the LivestreamService
            if (LivestreamService != null)
            {
                allStreams = await LivestreamService.GetListAsync();

                featuredStream = allStreams?
                    .Where(s => s.StreamStatus == StreamStatus.Live && !string.IsNullOrWhiteSpace(s.HlsUrl))
                    .OrderByDescending(s => s.Id)
                    .FirstOrDefault();

                if (featuredStream != null)
                {
                    SetFeaturedStream(featuredStream);
                    return;
                }
            }

            // Fallback to direct HTTP request if service approach fails
            await JS.InvokeVoidAsync("console.log", "Using HTTP client fallback for livestreams");

            // Make sure we're using the right base address
            var baseAddress = NavigationManager.BaseUri;
            if (baseAddress.EndsWith("/"))
                baseAddress = baseAddress.Substring(0, baseAddress.Length - 1);

            var apiUrl = $"{baseAddress}/api/app/livestream";
            await JS.InvokeVoidAsync("console.log", $"Requesting livestreams from: {apiUrl}");

            allStreams = await HttpClient.GetFromJsonAsync<List<LivestreamDto>>(apiUrl);

            featuredStream = allStreams?
                .Where(s => s.StreamStatus == StreamStatus.Live && !string.IsNullOrWhiteSpace(s.HlsUrl))
                .OrderByDescending(s => s.Id)
                .FirstOrDefault();

            if (featuredStream != null)
            {
                SetFeaturedStream(featuredStream);
            }
            else
            {
                // If no live streams, try to get a recent one that's completed
                var recentStream = allStreams?
                    .Where(s => !string.IsNullOrWhiteSpace(s.HlsUrl))
                    .OrderByDescending(s => s.Id)
                    .FirstOrDefault();

                if (recentStream != null)
                {
                    SetFeaturedStream(recentStream);
                    StreamStatusText = "Recently Completed";
                }
                else
                {
                    StreamTitle = "No live stream currently available.";
                    await JS.InvokeVoidAsync("console.log", "No livestreams found");
                }
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"Error loading featured stream: {ex.Message}");
            StreamTitle = "Error loading featured stream.";
        }
    }

    private async Task LoadUpcomingGamesAsync()
    {
        try
        {
            // Get all livestreams
            List<LivestreamDto> allStreams = await LivestreamService.GetListAsync();
            
            // Filter for pending/upcoming games only (not live, not completed)
            var currentDate = DateTime.Now;
            upcomingGames = allStreams
                .Where(s => (s.StreamStatus == StreamStatus.PendingStart || s.StreamStatus == StreamStatus.AwaitingConnection) 
                       && s.EventDate > currentDate)
                .OrderBy(s => s.EventDate)
                .Take(2)  // Get the 2 closest upcoming games
                .ToList();
            
            await JS.InvokeVoidAsync("console.log", $"Found {upcomingGames.Count} upcoming games");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"Error loading upcoming games: {ex.Message}");
            upcomingGames = new List<LivestreamDto>();
        }
    }

    private async Task LoadRecentScoresAsync()
    {
        try
        {
            // Get all livestreams
            List<LivestreamDto> allStreams = await LivestreamService.GetListAsync();
            
            // Filter for completed games with scores
            recentScores = allStreams
                .Where(s => s.StreamStatus == StreamStatus.Completed)
                .OrderByDescending(s => s.EventDate)
                .Take(2)  // Get the 2 most recent completed games
                .ToList();
            
            await JS.InvokeVoidAsync("console.log", $"Found {recentScores.Count} recent scores");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"Error loading recent scores: {ex.Message}");
            recentScores = new List<LivestreamDto>();
        }
    }

    private void SetFeaturedStream(LivestreamDto stream)
    {
        VideoUrl = stream.HlsUrl;
        FeaturedStreamId = stream.Id;
        FeaturedStreamStatus = stream.StreamStatus;
        StreamTitle = $"{stream.HomeTeam} {stream.HomeScore} - {stream.AwayScore} {stream.AwayTeam}";
    }

    protected bool IsLive => FeaturedStreamStatus == StreamStatus.Live;
}
