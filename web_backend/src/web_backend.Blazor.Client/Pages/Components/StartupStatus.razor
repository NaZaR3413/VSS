@inject IJSRuntime JSRuntime
@inject web_backend.Blazor.Client.Services.DebugService DebugService

@if (!string.IsNullOrEmpty(status) && isVisible)
{
    <div class="startup-status-container @(isComplete ? "complete" : "")">
        <div class="status-indicator">
            <div class="progress">
                <div class="progress-bar" role="progressbar" style="width: @(progress)%" aria-valuenow="@progress" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
            <div class="status-text">@status</div>
            @if (isComplete)
            {
                <button class="btn btn-sm btn-outline-success" @onclick="DismissStatus">Dismiss</button>
            }
            @if (hasError)
            {
                <div class="alert alert-danger mt-2">
                    <strong>Error:</strong> @errorMessage
                    <div>
                        <button class="btn btn-sm btn-outline-primary mt-2" @onclick="ShowLogs">Show Logs</button>
                        <button class="btn btn-sm btn-outline-danger mt-2" @onclick="ReloadPage">Reload Page</button>
                    </div>
                </div>
            }
        </div>
    </div>
}

<style>
    .startup-status-container {
        position: fixed;
        bottom: 20px;
        right: 20px;
        z-index: 9999;
        max-width: 300px;
        background-color: rgba(240, 240, 240, 0.9);
        border-radius: 5px;
        padding: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        transition: opacity 0.5s ease-in-out;
    }
    
    .startup-status-container.complete {
        opacity: 0.7;
    }
    
    .startup-status-container:hover {
        opacity: 1;
    }
    
    .status-indicator {
        font-size: 14px;
    }
    
    .status-text {
        margin-top: 5px;
        font-weight: bold;
    }
</style>

@code {
    private string status = "Initializing application...";
    private int progress = 0;
    private bool isComplete = false;
    private bool hasError = false;
    private string errorMessage = "";
    private bool isVisible = true;
    
    protected override async Task OnInitializedAsync()
    {
        await DebugService.Initialize();
        await DebugService.LogAsync("StartupStatus component initialized");
        
        await UpdateStatusAsync("Loading ABP modules...", 10);
        await Task.Delay(500); // Simulate a step
        
        await UpdateStatusAsync("Initializing authentication...", 30);
        await Task.Delay(500); // Simulate a step
        
        await UpdateStatusAsync("Setting up API client...", 50);
        await Task.Delay(500); // Simulate a step
        
        await UpdateStatusAsync("Loading application features...", 70);
        await Task.Delay(500); // Simulate a step
        
        try
        {
            await UpdateStatusAsync("Finalizing startup...", 90);
            await Task.Delay(500); // Simulate a step
            
            await CompleteStartupAsync();
        }
        catch (Exception ex)
        {
            await DebugService.LogAsync($"Error during startup: {ex.Message}");
            await SetErrorAsync(ex.Message);
        }
    }
    
    private async Task UpdateStatusAsync(string newStatus, int newProgress)
    {
        status = newStatus;
        progress = newProgress;
        await DebugService.LogAsync($"Startup status: {newStatus} ({newProgress}%)");
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task CompleteStartupAsync()
    {
        status = "Application ready";
        progress = 100;
        isComplete = true;
        await DebugService.LogAsync("Startup complete");
        await InvokeAsync(StateHasChanged);
        
        // Auto-hide after 5 seconds
        await Task.Delay(5000);
        if (isComplete && !hasError)
        {
            isVisible = false;
            await InvokeAsync(StateHasChanged);
        }
    }
    
    private async Task SetErrorAsync(string message)
    {
        hasError = true;
        errorMessage = message;
        status = "Startup error";
        await DebugService.LogAsync($"Startup error: {message}");
        await InvokeAsync(StateHasChanged);
    }
    
    private void DismissStatus()
    {
        isVisible = false;
        StateHasChanged();
    }
    
    private async Task ShowLogs()
    {
        var logs = DebugService.GetAllLogs();
        await JSRuntime.InvokeVoidAsync("alert", logs);
    }
    
    private async Task ReloadPage()
    {
        await JSRuntime.InvokeVoidAsync("location.reload");
    }
}