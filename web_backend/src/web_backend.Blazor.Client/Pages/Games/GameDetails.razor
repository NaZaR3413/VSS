@page "/games/{Id:guid}"
@using web_backend.Games
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject IGameAppService GameService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<PageTitle>Game Details - VSS</PageTitle>

@if (loading)
{
    <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Loading game details...</p>
    </div>
}
else if (game == null)
{
    <div class="alert alert-danger m-4">
        <i class="bi bi-exclamation-triangle-fill me-2"></i>
        Game not found. The game might have been removed or you don't have permission to view it.
        <div class="mt-3">
            <button class="btn btn-outline-primary" @onclick="NavigateBack">
                <i class="bi bi-arrow-left me-2"></i>Back to Games
            </button>
        </div>
    </div>
}
else
{
    <div class="game-details-container">
        <div class="row mb-4">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center">
                    <h1 class="mb-0">@game.HomeTeam vs @game.AwayTeam</h1>
                    <div>
                        <button class="btn btn-outline-primary me-2" @onclick="NavigateBack">
                            <i class="bi bi-arrow-left me-2"></i>Back
                        </button>
                        @if (isAdmin)
                        {
                            <a href="/admin/games/edit/@game.Id" class="btn btn-outline-secondary me-2">
                                <i class="bi bi-pencil me-2"></i>Edit
                            </a>
                            <button class="btn btn-outline-danger" @onclick="DeleteGame">
                                <i class="bi bi-trash me-2"></i>Delete
                            </button>
                        }
                    </div>
                </div>
                <div class="game-meta">
                    <span class="me-3">
                        <i class="bi bi-calendar me-1"></i>
                        @game.EventDate.ToString("MMMM dd, yyyy")
                    </span>
                    <span class="me-3">
                        <i class="bi bi-tag me-1"></i>
                        @game.EventType
                    </span>
                    @if (!string.IsNullOrEmpty(game.Broadcasters))
                    {
                        <span>
                            <i class="bi bi-broadcast me-1"></i>
                            @game.Broadcasters
                        </span>
                    }
                </div>
            </div>
        </div>

        <div class="row mb-4">
            <div class="col-12">
                <div class="video-container">
                    <video id="gameVideo" class="video-js vjs-big-play-centered" controls preload="auto" width="100%" height="auto" poster="">
                        <source src="@game.GameUrl" type="video/mp4">
                        Your browser does not support the video tag.
                    </video>
                </div>
            </div>
        </div>

        <div class="row mb-4">
            <div class="col-md-8">
                <div class="card h-100">
                    <div class="card-header">
                        <h4 class="mb-0">Description</h4>
                    </div>
                    <div class="card-body">
                        <p>@game.Description</p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card h-100">
                    <div class="card-header">
                        <h4 class="mb-0">Game Details</h4>
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-center mb-4">
                            <div class="text-center px-4">
                                <h2 class="team-name">@game.HomeTeam</h2>
                                <div class="score @(game.HomeScore > game.AwayScore ? "winner" : "")">@game.HomeScore</div>
                            </div>
                            <div class="text-center px-2 d-flex align-items-center">
                                <h2>vs</h2>
                            </div>
                            <div class="text-center px-4">
                                <h2 class="team-name">@game.AwayTeam</h2>
                                <div class="score @(game.AwayScore > game.HomeScore ? "winner" : "")">@game.AwayScore</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private GameDto game;
    private bool loading = true;
    private bool isAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAdmin = authState.User.IsInRole("admin");
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadGameAsync();
    }

    private async Task LoadGameAsync()
    {
        loading = true;
        try
        {
            game = await GameService.GetAsync(Id);
            await JS.InvokeVoidAsync("console.log", $"Loaded game: {game.HomeTeam} vs {game.AwayTeam}");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"Error loading game: {ex.Message}");
            game = null;
        }
        finally
        {
            loading = false;
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/games");
    }

    private async Task DeleteGame()
    {
        if (!isAdmin) return;
        
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this game? This action cannot be undone.");
        
        if (confirmed)
        {
            try
            {
                await GameService.DeleteAsync(Id);
                NavigationManager.NavigateTo("/games");
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", $"Error deleting game: {ex.Message}");
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && game != null)
        {
            await JS.InvokeVoidAsync("initializeVideoPlayer", "gameVideo");
        }
    }
}

<style>
    .game-details-container {
        padding: 20px;
        max-width: 1200px;
        margin: 0 auto;
    }
    
    .game-meta {
        margin-top: 10px;
        color: #6c757d;
    }
    
    .video-container {
        position: relative;
        padding-bottom: 56.25%; /* 16:9 aspect ratio */
        height: 0;
        overflow: hidden;
        background-color: #000;
        border-radius: 8px;
    }
    
    .video-container video {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }
    
    .team-name {
        font-weight: bold;
    }
    
    .score {
        font-size: 2.5rem;
        font-weight: bold;
    }
    
    .winner {
        color: #28a745;
    }
</style>

@code {
    // Initialize video.js player
    [JSInvokable]
    public static Task InitializeVideoPlayer(string videoElementId)
    {
        return Task.CompletedTask;
    }
}