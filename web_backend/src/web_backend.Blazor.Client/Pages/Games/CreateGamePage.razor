@page "/admin/games/create"
@using web_backend.Games
@using Microsoft.AspNetCore.Components.Forms
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using System.IO
@using System.Net.Http.Headers
@using System.Net.Http.Json
@inject IGameAppService GameService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject HttpClient Http

<PageTitle>Upload New Game - VSS Admin</PageTitle>

<div class="create-game-container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Upload New Game</h1>
        <button class="btn btn-outline-primary" @onclick="NavigateBack">
            <i class="bi bi-arrow-left me-2"></i>Back to Games
        </button>
    </div>

    <EditForm Model="@gameModel" OnValidSubmit="SubmitGameAsync" class="game-upload-form">
        <DataAnnotationsValidator />
        <Microsoft.AspNetCore.Components.Forms.ValidationSummary />

        <div class="card mb-4">
            <div class="card-header bg-primary text-white">
                <h4 class="mb-0">Game Information</h4>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="homeTeam" class="form-label">Home Team*</label>
                        <InputText id="homeTeam" @bind-Value="gameModel.HomeTeam" class="form-control" />
                        <ValidationMessage For="@(() => gameModel.HomeTeam)" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="awayTeam" class="form-label">Away Team*</label>
                        <InputText id="awayTeam" @bind-Value="gameModel.AwayTeam" class="form-control" />
                        <ValidationMessage For="@(() => gameModel.AwayTeam)" />
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="homeScore" class="form-label">Home Score</label>
                        <InputNumber id="homeScore" @bind-Value="gameModel.HomeScore" class="form-control" />
                        <ValidationMessage For="@(() => gameModel.HomeScore)" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="awayScore" class="form-label">Away Score</label>
                        <InputNumber id="awayScore" @bind-Value="gameModel.AwayScore" class="form-control" />
                        <ValidationMessage For="@(() => gameModel.AwayScore)" />
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="eventDate" class="form-label">Event Date*</label>
                        <InputDate id="eventDate" @bind-Value="gameModel.EventDate" class="form-control" />
                        <ValidationMessage For="@(() => gameModel.EventDate)" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="eventType" class="form-label">Event Type*</label>
                        <InputText id="eventType" @bind-Value="gameModel.EventType" class="form-control" />
                        <ValidationMessage For="@(() => gameModel.EventType)" />
                    </div>
                </div>

                <div class="mb-3">
                    <label for="broadcasters" class="form-label">Broadcasters</label>
                    <InputText id="broadcasters" @bind-Value="gameModel.Broadcasters" class="form-control" />
                    <ValidationMessage For="@(() => gameModel.Broadcasters)" />
                </div>

                <div class="mb-3">
                    <label for="description" class="form-label">Description*</label>
                    <InputTextArea id="description" @bind-Value="gameModel.Description" class="form-control" rows="4" />
                    <ValidationMessage For="@(() => gameModel.Description)" />
                </div>
            </div>
        </div>

        <div class="card mb-4">
            <div class="card-header bg-primary text-white">
                <h4 class="mb-0">Game Video</h4>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label class="form-label">Upload Game Video File*</label>
                    <InputFile id="gameVideo" OnChange="OnFileSelected" class="form-control" accept="video/*" />
                    <small class="text-muted">Upload your game video file (MP4 format recommended, max size: 500MB)</small>
                    
                    @if (!string.IsNullOrEmpty(fileValidationMessage))
                    {
                        <div class="alert alert-danger mt-2">
                            @fileValidationMessage
                        </div>
                    }
                    
                    @if (isUploading)
                    {
                        <div class="progress mt-3">
                            <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                 role="progressbar" 
                                 style="width: @uploadProgress%;" 
                                 aria-valuenow="@uploadProgress" 
                                 aria-valuemin="0" 
                                 aria-valuemax="100">
                                @uploadProgress%
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
            <button type="button" class="btn btn-outline-secondary me-md-2" @onclick="NavigateBack">Cancel</button>
            <button type="submit" class="btn btn-success" disabled="@(isUploading || !formValid || selectedFile == null)">
                @if (isUploading)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    <span>Uploading...</span>
                }
                else
                {
                    <i class="bi bi-cloud-upload me-2"></i>
                    <span>Upload Game</span>
                }
            </button>
        </div>
    </EditForm>
</div>

@code {
    private GameUploadDto gameModel = new GameUploadDto
    {
        EventDate = DateTime.Today,
        HomeTeam = "",
        AwayTeam = "",
        Description = "",
        EventType = ""
    };
    
    private bool isUploading = false;
    private bool formValid = false;
    private int uploadProgress = 0;
    private string fileValidationMessage = string.Empty;
    private IBrowserFile selectedFile;
    
    // Max file size (500MB)
    private const long MaxFileSize = 500 * 1024 * 1024;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var isAdmin = authState.User.IsInRole("admin");
        
        if (!isAdmin)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/games");
    }
    
    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        
        // Basic validation
        fileValidationMessage = string.Empty;
        
        if (selectedFile != null)
        {
            if (selectedFile.Size > MaxFileSize)
            {
                fileValidationMessage = "File size exceeds 500MB limit.";
                selectedFile = null;
            }
            else if (!selectedFile.ContentType.StartsWith("video/"))
            {
                fileValidationMessage = "Please select a valid video file.";
                selectedFile = null;
            }
        }
        
        ValidateForm();
        await InvokeAsync(StateHasChanged);
    }
    
    private void ValidateForm()
    {
        formValid = !string.IsNullOrEmpty(gameModel.HomeTeam) && 
                    !string.IsNullOrEmpty(gameModel.AwayTeam) && 
                    !string.IsNullOrEmpty(gameModel.Description) &&
                    !string.IsNullOrEmpty(gameModel.EventType);
    }

    private async Task SubmitGameAsync()
    {
        if (selectedFile == null)
        {
            fileValidationMessage = "Please select a game video file.";
            return;
        }
        
        isUploading = true;
        uploadProgress = 0;
        
        try
        {
            // Create a multipart form with all the data
            var content = new MultipartFormDataContent();
            
            // Add the file
            var fileContent = new StreamContent(selectedFile.OpenReadStream(MaxFileSize));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(selectedFile.ContentType);
            content.Add(
                content: fileContent,
                name: "VideoFile",                   
                fileName: selectedFile.Name);
            
            // Add other form fields
            content.Add(new StringContent(gameModel.HomeTeam), "HomeTeam");
            content.Add(new StringContent(gameModel.AwayTeam), "AwayTeam");
            content.Add(new StringContent(gameModel.HomeScore?.ToString() ?? ""), "HomeScore");
            content.Add(new StringContent(gameModel.AwayScore?.ToString() ?? ""), "AwayScore");
            content.Add(new StringContent(gameModel.Broadcasters ?? ""), "Broadcasters");
            content.Add(new StringContent(gameModel.Description), "Description");
            content.Add(new StringContent(gameModel.EventDate.ToString("yyyy-MM-dd")), "EventDate");
            content.Add(new StringContent(gameModel.EventType), "EventType");
            
            // Set up a progress handler for file upload
            var progressHandler = new Progress<long>((bytesTransferred) =>
            {
                var percent = (int)((double)bytesTransferred / selectedFile.Size * 100);
                uploadProgress = percent;
                InvokeAsync(StateHasChanged);
            });
            
            // Make the API call
            var response = await Http.PostAsync("api/app/game/upload", content);
            
            if (response.IsSuccessStatusCode)
            {
                var gameDto = await response.Content.ReadFromJsonAsync<GameDto>();
                
                // Navigate to the newly created game
                NavigationManager.NavigateTo($"/games/{gameDto.Id}");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Error uploading game: {error}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error uploading game: {ex.Message}");
        }
        finally
        {
            isUploading = false;
            await InvokeAsync(StateHasChanged);
        }
    }
}

<style>
    .create-game-container {
        padding: 20px;
        max-width: 1000px;
        margin: 0 auto;
    }
    
    .game-upload-form {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 20px;
    }
</style>