@page "/admin/scores"
@using System.Net.Http.Json
@using web_backend.Domain.Shared.Dtos
@inject HttpClient HttpClient

<AuthorizeView Roles="admin" Context="auth">
    <Authorized>
        <h3>Manage Scores</h3>

        <button @onclick="ShowAddScoreModal">Add Score</button>

        <ul>
            @foreach (var score in scoreList)
            {
                <li>
                    @score.TeamA vs @score.TeamB: @score.ScoreA - @score.ScoreB
                    <button @onclick="() => EditScore(score)">Edit</button>
                    <button @onclick="() => DeleteScore(score.Id)">Delete</button>
                </li>
            }
        </ul>

        <EditForm Model="newScore" OnValidSubmit="AddScore">
            <DataAnnotationsValidator />
            <Microsoft.AspNetCore.Components.Forms.ValidationSummary />

            <div class="mb-3">
                <label for="teamA">Team A</label>
                <InputText id="teamA" class="form-control" @bind-Value="newScore.TeamA" />
            </div>

            <div class="mb-3">
                <label for="teamB">Team B</label>
                <InputText id="teamB" class="form-control" @bind-Value="newScore.TeamB" />
            </div>

            <div class="mb-3">
                <label for="scoreA">Score A</label>
                <InputNumber id="scoreA" class="form-control" @bind-Value="newScore.ScoreA" />
            </div>

            <div class="mb-3">
                <label for="scoreB">Score B</label>
                <InputNumber id="scoreB" class="form-control" @bind-Value="newScore.ScoreB" />
            </div>

            <button type="submit" class="btn btn-primary">Save</button>
        </EditForm>
    </Authorized>

    <NotAuthorized>
        <p>You do not have permission to view this page.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<ScoreDto> scoreList = new();
    private ScoreDto newScore = new ScoreDto();

    protected override async Task OnInitializedAsync()
    {
        scoreList = await HttpClient.GetFromJsonAsync<List<ScoreDto>>("/api/scores");
    }

    private void ShowAddScoreModal()
    {
        newScore = new ScoreDto();
    }

    private async Task AddScore()
    {
        await HttpClient.PostAsJsonAsync("/api/scores", newScore);
        scoreList = await HttpClient.GetFromJsonAsync<List<ScoreDto>>("/api/scores");
    }

    private void EditScore(ScoreDto score)
    {
        newScore = new ScoreDto
            {
                Id = score.Id,
                TeamA = score.TeamA,
                TeamB = score.TeamB,
                ScoreA = score.ScoreA,
                ScoreB = score.ScoreB
            };
    }

    private async Task DeleteScore(Guid id)
    {
        await HttpClient.DeleteAsync($"/api/scores/{id}");
        scoreList = await HttpClient.GetFromJsonAsync<List<ScoreDto>>("/api/scores");
    }
}
