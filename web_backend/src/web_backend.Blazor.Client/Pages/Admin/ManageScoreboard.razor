@page "/admin/manage-scoreboard"
@using Volo.Abp.Application.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@attribute [Authorize(Roles = "admin")]
@implements IAsyncDisposable

<div class="container-fluid mt-4">
    <div class="vss-page-title mb-3">
        <h2><i class="bi bi-stopwatch me-2"></i>Manage Scoreboard</h2>
        <p class="text-muted">Control the active scoreboard display in real-time</p>
    </div>

    <div class="row">
        <div class="col-md-3">
            <div class="card mb-4">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Select Scoreboard</h5>
                </div>
                <div class="card-body">
                    @if (availableScoreboards == null || !availableScoreboards.Any())
                    {
                        <div class="alert alert-info">
                            No scoreboards available. <a href="/admin/scoreboards">Create one first</a>
                        </div>
                    }
                    else
                    {
                        <div class="form-group">
                            <label class="form-label">Active Scoreboard</label>
                            <select class="form-select" @bind="selectedScoreboardId">
                                <option value="">-- Select a scoreboard --</option>
                                @foreach (var scoreboard in availableScoreboards)
                                {
                                    <option value="@scoreboard.Id">@scoreboard.Name</option>
                                }
                            </select>
                        </div>

                        <div class="form-group mt-3">
                            <label class="form-label">OBS Browser Source URL</label>
                            <div class="input-group">
                                <input type="text" class="form-control" readonly value="@obsUrl" />
                                <button class="btn btn-outline-secondary" @onclick="CopyObsUrl">
                                    <i class="bi bi-clipboard"></i>
                                </button>
                            </div>
                            <small class="form-text text-muted">Copy this URL into your OBS browser source</small>
                        </div>
                    }
                </div>
            </div>

            <div class="card">
                <div class="card-header bg-dark text-white">
                    <h5 class="mb-0">Display Status</h5>
                </div>
                <div class="card-body">
                    <div class="d-flex justify-content-between mb-2">
                        <span>Signal Status:</span>
                        <span class="badge @(isConnected ? "bg-success" : "bg-danger")">
                            @(isConnected ? "Connected" : "Disconnected")
                        </span>
                    </div>
                    <div class="d-flex justify-content-between">
                        <span>Last Updated:</span>
                        <span>@(lastUpdateTime?.ToString("HH:mm:ss") ?? "Never")</span>
                    </div>
                </div>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(selectedScoreboardId))
        {
            <div class="col-md-9">
                <div class="card mb-4">
                    <div class="card-header bg-primary text-white">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">@currentScoreboard.Name</h5>
                            <div>
                                <span class="badge bg-light text-dark me-2">@currentScoreboard.SportType</span>
                                <span class="badge bg-secondary">Live</span>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <!-- Scoreboard Preview -->
                        <div class="scoreboard-preview mb-4">
                            <div class="scoreboard-container @currentScoreboard.ScoreboardShape.ToLower()" 
                                 style="background-color: @currentScoreboard.BackgroundColor; color: @currentScoreboard.TextColor; border-color: @currentScoreboard.BorderColor;">
                                <div class="teams-container">
                                    <div class="team home @(possession == "home" ? "possession" : "")" 
                                         style="background-color: @currentScoreboard.HomeTeamBackgroundColor; color: @currentScoreboard.HomeTeamTextColor;">
                                        <div class="team-name">@currentScoreboard.HomeTeamName</div>
                                        <div class="team-score">@homeScore</div>
                                    </div>
                                    
                                    <div class="game-info">
                                        <div class="period-indicator">@GetPeriodLabel(): @currentPeriod</div>
                                        <div class="game-clock">@FormattedGameClock</div>
                                        @if (showShotClock)
                                        {
                                            <div class="shot-clock @(shotClockWarning ? "warning" : "")">@shotClock.ToString("F0")</div>
                                        }
                                    </div>
                                    
                                    <div class="team away @(possession == "away" ? "possession" : "")"
                                         style="background-color: @currentScoreboard.AwayTeamBackgroundColor; color: @currentScoreboard.AwayTeamTextColor;">
                                        <div class="team-name">@currentScoreboard.AwayTeamName</div>
                                        <div class="team-score">@awayScore</div>
                                    </div>
                                </div>
                                
                                @if (showTimeouts)
                                {
                                    <div class="timeout-container">
                                        <div class="home-timeouts">
                                            @for (int i = 0; i < maxTimeouts; i++)
                                            {
                                                <div class="timeout-indicator @(i < homeTimeouts ? "active" : "")"></div>
                                            }
                                        </div>
                                        <div class="away-timeouts">
                                            @for (int i = 0; i < maxTimeouts; i++)
                                            {
                                                <div class="timeout-indicator @(i < awayTimeouts ? "active" : "")"></div>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Game Clock Controls -->
                        <div class="card mb-3">
                            <div class="card-header bg-dark text-white">
                                <h6 class="mb-0">Game Clock Controls</h6>
                            </div>
                            <div class="card-body">
                                <div class="d-flex gap-3 align-items-center">
                                    <div class="btn-group me-4">
                                        <button class="btn @(gameClockRunning ? "btn-danger" : "btn-success")" @onclick="ToggleGameClock">
                                            <i class="bi @(gameClockRunning ? "bi-pause-fill" : "bi-play-fill")"></i>
                                            @(gameClockRunning ? "Pause" : "Start")
                                        </button>
                                        <button class="btn btn-secondary" @onclick="ResetGameClock">
                                            <i class="bi bi-arrow-counterclockwise"></i> Reset
                                        </button>
                                    </div>
                                    
                                    <div class="clock-adjust-controls">
                                        <button class="btn btn-outline-dark" @onclick="() => AdjustGameClock(-60)">-1m</button>
                                        <button class="btn btn-outline-dark" @onclick="() => AdjustGameClock(-10)">-10s</button>
                                        <button class="btn btn-outline-dark" @onclick="() => AdjustGameClock(10)">+10s</button>
                                        <button class="btn btn-outline-dark" @onclick="() => AdjustGameClock(60)">+1m</button>
                                    </div>
                                    
                                    <div class="ms-auto">
                                        <div class="input-group">
                                            <input type="text" class="form-control" placeholder="MM:SS" @bind-value="gameClockInput" />
                                            <button class="btn btn-primary" @onclick="SetGameClockFromInput">Set</button>
                                        </div>
                                    </div>
                                </div>
                                
                                @if (showShotClock)
                                {
                                    <div class="mt-3 d-flex align-items-center">
                                        <label class="form-label me-2 mb-0">Shot Clock:</label>
                                        <button class="btn btn-sm btn-outline-dark me-2" @onclick="() => ResetShotClock(24)">24</button>
                                        <button class="btn btn-sm btn-outline-dark me-2" @onclick="() => ResetShotClock(14)">14</button>
                                        <button class="btn btn-sm btn-outline-dark me-4" @onclick="() => ResetShotClock(0)">Reset</button>
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Score Controls -->
                        <div class="row">
                            <div class="col-md-6">
                                <div class="card mb-3">
                                    <div class="card-header" style="background-color: @currentScoreboard.HomeTeamBackgroundColor; color: @currentScoreboard.HomeTeamTextColor;">
                                        <h6 class="mb-0">@currentScoreboard.HomeTeamName</h6>
                                    </div>
                                    <div class="card-body">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div class="btn-group me-3">
                                                <button class="btn btn-outline-dark" @onclick="() => UpdateHomeScore(-1)">-1</button>
                                                <button class="btn btn-outline-dark" @onclick="() => UpdateHomeScore(1)">+1</button>
                                                <button class="btn btn-outline-dark" @onclick="() => UpdateHomeScore(2)">+2</button>
                                                <button class="btn btn-outline-dark" @onclick="() => UpdateHomeScore(3)">+3</button>
                                            </div>
                                            
                                            <div class="d-flex align-items-center">
                                                <span class="lead fw-bold me-2">Score:</span>
                                                <span class="display-5">@homeScore</span>
                                            </div>
                                        </div>
                                        
                                        <div class="mt-3">
                                            <div class="d-flex align-items-center">
                                                <span class="me-2">Timeouts:</span>
                                                <button class="btn btn-sm btn-outline-dark me-2" @onclick="() => UpdateHomeTimeouts(-1)">
                                                    <i class="bi bi-dash"></i>
                                                </button>
                                                <span class="me-2">@homeTimeouts / @maxTimeouts</span>
                                                <button class="btn btn-sm btn-outline-dark" @onclick="() => UpdateHomeTimeouts(1)">
                                                    <i class="bi bi-plus"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="col-md-6">
                                <div class="card mb-3">
                                    <div class="card-header" style="background-color: @currentScoreboard.AwayTeamBackgroundColor; color: @currentScoreboard.AwayTeamTextColor;">
                                        <h6 class="mb-0">@currentScoreboard.AwayTeamName</h6>
                                    </div>
                                    <div class="card-body">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div class="btn-group me-3">
                                                <button class="btn btn-outline-dark" @onclick="() => UpdateAwayScore(-1)">-1</button>
                                                <button class="btn btn-outline-dark" @onclick="() => UpdateAwayScore(1)">+1</button>
                                                <button class="btn btn-outline-dark" @onclick="() => UpdateAwayScore(2)">+2</button>
                                                <button class="btn btn-outline-dark" @onclick="() => UpdateAwayScore(3)">+3</button>
                                            </div>
                                            
                                            <div class="d-flex align-items-center">
                                                <span class="lead fw-bold me-2">Score:</span>
                                                <span class="display-5">@awayScore</span>
                                            </div>
                                        </div>
                                        
                                        <div class="mt-3">
                                            <div class="d-flex align-items-center">
                                                <span class="me-2">Timeouts:</span>
                                                <button class="btn btn-sm btn-outline-dark me-2" @onclick="() => UpdateAwayTimeouts(-1)">
                                                    <i class="bi bi-dash"></i>
                                                </button>
                                                <span class="me-2">@awayTimeouts / @maxTimeouts</span>
                                                <button class="btn btn-sm btn-outline-dark" @onclick="() => UpdateAwayTimeouts(1)">
                                                    <i class="bi bi-plus"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Period & Possession Controls -->
                        <div class="card">
                            <div class="card-header bg-dark text-white">
                                <h6 class="mb-0">Game Status Controls</h6>
                            </div>
                            <div class="card-body d-flex justify-content-between">
                                <div>
                                    <label class="form-label">@GetPeriodLabel()</label>
                                    <div class="btn-group">
                                        <button class="btn btn-outline-dark" @onclick="DecrementPeriod">
                                            <i class="bi bi-dash"></i>
                                        </button>
                                        <button class="btn btn-outline-dark" disabled>@currentPeriod</button>
                                        <button class="btn btn-outline-dark" @onclick="IncrementPeriod">
                                            <i class="bi bi-plus"></i>
                                        </button>
                                    </div>
                                </div>
                                
                                <div>
                                    <label class="form-label">Possession</label>
                                    <div class="btn-group">
                                        <button class="btn @(possession == "home" ? "btn-primary" : "btn-outline-dark")"
                                                @onclick="SetPossessionHome">
                                            @currentScoreboard.HomeTeamName
                                        </button>
                                        <button class="btn @(possession == "none" ? "btn-primary" : "btn-outline-dark")"
                                                @onclick="SetPossessionNone">
                                            None
                                        </button>
                                        <button class="btn @(possession == "away" ? "btn-primary" : "btn-outline-dark")"
                                                @onclick="SetPossessionAway">
                                            @currentScoreboard.AwayTeamName
                                        </button>
                                    </div>
                                </div>
                                
                                @if (currentScoreboard.SportType == "Baseball")
                                {
                                    <div>
                                        <label class="form-label">Inning</label>
                                        <div class="d-flex">
                                            <button class="btn @(topInning ? "btn-primary" : "btn-outline-dark") me-2"
                                                    @onclick="() => topInning = true">
                                                Top
                                            </button>
                                            <button class="btn @(!topInning ? "btn-primary" : "btn-outline-dark")"
                                                    @onclick="() => topInning = false">
                                                Bottom
                                            </button>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<style>
    .scoreboard-preview {
        margin: 0 auto;
        max-width: 750px;
    }
    
    .scoreboard-container {
        font-family: 'Roboto', 'Arial', sans-serif;
        display: flex;
        flex-direction: column;
        border: 3px solid;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        width: 100%;
        max-width: 750px;
        height: 80px;
        overflow: hidden;
    }
    
    .scoreboard-container .teams-container {
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }
    
    .scoreboard-container .team {
        height: 100%;
        padding: 0 15px;
        display: flex;
        align-items: center;
        justify-content: space-between;
        min-width: 180px;
        position: relative;
    }
    
    .scoreboard-container .team-name {
        font-size: 1.2em;
        font-weight: bold;
        margin: 0 10px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
    
    .scoreboard-container .team-score {
        font-size: 2em;
        font-weight: bold;
        min-width: 50px;
        text-align: center;
    }
    
    .scoreboard-container .game-info {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        background-color: rgba(0, 0, 0, 0.7);
        color: white;
        padding: 0 15px;
        height: 100%;
        min-width: 120px;
    }
    
    .scoreboard-container .period-indicator {
        font-size: 0.75em;
        margin-bottom: 3px;
    }
    
    .scoreboard-container .game-clock {
        font-size: 1.5em;
        font-weight: bold;
    }
    
    .scoreboard-container .shot-clock {
        font-size: 0.75em;
        margin-top: 3px;
    }
    
    .scoreboard-container .shot-clock.warning {
        color: red;
        animation: blinking 1s infinite;
    }
    
    .scoreboard-container .timeout-container {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        display: flex;
        justify-content: space-between;
        padding: 2px 10px;
        background-color: rgba(0,0,0,0.3);
        height: 10px;
    }
    
    .scoreboard-container .timeout-indicator {
        width: 6px;
        height: 6px;
        border-radius: 50%;
        background-color: rgba(255, 255, 255, 0.3);
        display: inline-block;
        margin: 0 2px;
    }
    
    .scoreboard-container .timeout-indicator.active {
        background-color: rgb(255, 215, 0);
    }

    .scoreboard-container .team.possession::after {
        content: "\2022";
        position: absolute;
        font-size: 18px;
        color: yellow;
    }
    
    .scoreboard-container .team.home.possession::after {
        left: 5px;
    }
    
    .scoreboard-container .team.away.possession::after {
        right: 5px;
        left: auto;
    }
    
    /* Shape Variations */
    .scoreboard-container.rectangle {
        border-radius: 0;
    }
    
    .scoreboard-container.rounded {
        border-radius: 8px;
    }
    
    .scoreboard-container.pill {
        border-radius: 40px;
    }
    
    .scoreboard-container.modern {
        border-radius: 4px;
    }
    
    .scoreboard-container.slim {
        border-radius: 0;
        height: 60px; /* Even thinner */
    }
    
    /* Animation */
    @@keyframes blinking {
        50% { opacity: 0.5; }
    }
</style>

@code {
    private List<SavedScoreboard>? availableScoreboards;
    private string _selectedScoreboardId = "";
    private string selectedScoreboardId
    {
        get => _selectedScoreboardId;
        set
        {
            if (_selectedScoreboardId != value)
            {
                _selectedScoreboardId = value;
                if (!string.IsNullOrEmpty(value))
                {
                    _ = LoadSelectedScoreboard(value);
                }
            }
        }
    }
    private SavedScoreboard currentScoreboard = new SavedScoreboard();
    private string obsUrl = "";
    private bool isConnected = false;
    private DateTime? lastUpdateTime = null;
    private HubConnection? hubConnection;
    
    // Game state
    private bool gameClockRunning = false;
    private double gameClockSeconds = 12 * 60; // Default 12 minutes
    private double shotClock = 24; // Default 24 seconds
    private bool shotClockRunning = false;
    private bool shotClockWarning = false;
    private bool showShotClock = true;
    private string gameClockInput = "12:00";
    private int homeScore = 0;
    private int awayScore = 0;
    private int homeTimeouts = 4;
    private int awayTimeouts = 4;
    private int maxTimeouts = 4;
    private bool showTimeouts = true;
    private int currentPeriod = 1;
    private string possession = "none";
    private bool topInning = true;
    
    // Timers
    private System.Timers.Timer? gameClockTimer;
    private System.Timers.Timer? shotClockTimer;
    
    public class SavedScoreboard
    {
        public string Id { get; set; } = "";
        public string Name { get; set; } = "";
        public string SportType { get; set; } = "";
        public string ScoreboardShape { get; set; } = "";
        public string EventTitle { get; set; } = "";
        public string HomeTeamName { get; set; } = "";
        public string AwayTeamName { get; set; } = "";
        public string HomeTeamLogo { get; set; } = "";
        public string AwayTeamLogo { get; set; } = "";
        public string BackgroundColor { get; set; } = "";
        public string TextColor { get; set; } = "";
        public string BorderColor { get; set; } = "";
        public string HeaderColor { get; set; } = "";
        public string HomeTeamBackgroundColor { get; set; } = "";
        public string HomeTeamTextColor { get; set; } = "";
        public string AwayTeamBackgroundColor { get; set; } = "";
        public string AwayTeamTextColor { get; set; } = "";
        public bool ShowTimeouts { get; set; } = true;
        public bool ShowAdditionalStats { get; set; } = true;
        public string? LivestreamId { get; set; } = null;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadSavedScoreboards();
        
        // Setup timers
        gameClockTimer = new System.Timers.Timer(1000);
        gameClockTimer.Elapsed += OnGameClockTick;
        
        shotClockTimer = new System.Timers.Timer(1000);
        shotClockTimer.Elapsed += OnShotClockTick;
        
        // Connect to SignalR hub
        await SetupSignalRConnection();
    }

    private async Task SetupSignalRConnection()
    {
        try
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl("https://salmon-glacier-08dca301e.6.azurestaticapps.net/signalr/scoreboard")
                .WithAutomaticReconnect()
                .Build();

            hubConnection.Closed += (error) =>
            {
                isConnected = false;
                InvokeAsync(StateHasChanged);
                return Task.CompletedTask;
            };

            hubConnection.Reconnected += (connectionId) =>
            {
                isConnected = true;
                InvokeAsync(StateHasChanged);
                return Task.CompletedTask;
            };

            await hubConnection.StartAsync();
            isConnected = true;
        }
        catch (Exception ex)
        {
            isConnected = false;
            await JS.InvokeVoidAsync("console.error", "SignalR connection error: " + ex.Message);
        }
    }

    private async Task LoadSavedScoreboards()
    {
        var json = await JS.InvokeAsync<string>("localStorage.getItem", "savedScoreboards");
        
        if (string.IsNullOrEmpty(json))
        {
            availableScoreboards = new List<SavedScoreboard>();
            return;
        }
        
        try
        {
            availableScoreboards = JsonSerializer.Deserialize<List<SavedScoreboard>>(json) ?? new List<SavedScoreboard>();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "Error loading saved scoreboards: " + ex.Message);
            availableScoreboards = new List<SavedScoreboard>();
        }
    }

    private async Task LoadSelectedScoreboard(string scoreboardId)
    {
        if (string.IsNullOrEmpty(scoreboardId))
        {
            return;
        }
        
        if (availableScoreboards == null)
        {
            await LoadSavedScoreboards();
        }
        
        var scoreboard = availableScoreboards?.FirstOrDefault(s => s.Id == scoreboardId);
        
        if (scoreboard != null)
        {
            currentScoreboard = scoreboard;
            
            // Reset game state based on sport type
            InitializeSportDefaults(currentScoreboard.SportType);
            
            // Set the OBS URL
            obsUrl = $"https://salmon-glacier-08dca301e.6.azurestaticapps.net/scoreboard/overlay?admin=false&id={scoreboard.Id}";
            
            // Notify connected clients
            await UpdateScoreboard();
        }
    }

    private void InitializeSportDefaults(string sportType)
    {
        switch (sportType)
        {
            case "Basketball":
                gameClockSeconds = 12 * 60; // 12 minutes
                shotClock = 24; // 24 seconds
                currentPeriod = 1;
                maxTimeouts = 4;
                homeTimeouts = 4;
                awayTimeouts = 4;
                showTimeouts = true;
                showShotClock = true;
                break;
                
            case "Football":
                gameClockSeconds = 15 * 60; // 15 minutes
                shotClock = 40; // Play clock
                currentPeriod = 1;
                maxTimeouts = 3;
                homeTimeouts = 3;
                awayTimeouts = 3;
                showTimeouts = true;
                showShotClock = true;
                break;
                
            case "Soccer":
                gameClockSeconds = 45 * 60; // 45 minutes
                currentPeriod = 1;
                maxTimeouts = 0;
                homeTimeouts = 0;
                awayTimeouts = 0;
                showTimeouts = false;
                showShotClock = false;
                break;
                
            case "Hockey":
                gameClockSeconds = 20 * 60; // 20 minutes
                currentPeriod = 1;
                maxTimeouts = 1;
                homeTimeouts = 1;
                awayTimeouts = 1;
                showTimeouts = true;
                showShotClock = false;
                break;
                
            case "Baseball":
                gameClockSeconds = 0; // No clock
                currentPeriod = 1; // Inning
                topInning = true;
                maxTimeouts = 0;
                homeTimeouts = 0;
                awayTimeouts = 0;
                showTimeouts = false;
                showShotClock = false;
                break;
        }
        
        // Reset scores
        homeScore = 0;
        awayScore = 0;
        
        // Reset possession
        possession = "none";
        
        // Reset timers
        gameClockRunning = false;
        shotClockRunning = false;
        
        // Reset clock input
        TimeSpan time = TimeSpan.FromSeconds(gameClockSeconds);
        gameClockInput = $"{time.Minutes}:{time.Seconds:D2}";
    }

    private void OnGameClockTick(object? sender, System.Timers.ElapsedEventArgs e)
    {
        if (!gameClockRunning) return;

        gameClockSeconds -= 1;

        if (gameClockSeconds <= 0)
        {
            gameClockSeconds = 0;
            gameClockRunning = false;
            gameClockTimer?.Stop();
        }

        InvokeAsync(StateHasChanged);
    }

    private void OnShotClockTick(object? sender, System.Timers.ElapsedEventArgs e)
    {
        if (!shotClockRunning) return;

        shotClock -= 1;

        // Enable warning when shot clock is low
        shotClockWarning = shotClock <= 5;

        if (shotClock <= 0)
        {
            shotClock = 0;
            shotClockRunning = false;
            shotClockTimer?.Stop();
        }

        InvokeAsync(StateHasChanged);
    }

    private string FormattedGameClock
    {
        get
        {
            TimeSpan time = TimeSpan.FromSeconds(gameClockSeconds);
            return time.Minutes.ToString("D2") + ":" + time.Seconds.ToString("D2");
        }
    }

    private string GetPeriodLabel()
    {
        return currentScoreboard.SportType switch
        {
            "Basketball" => "Quarter",
            "Football" => "Quarter",
            "Soccer" => "Half",
            "Hockey" => "Period",
            "Baseball" => "Inning",
            _ => "Period"
        };
    }

    private async Task CopyObsUrl()
    {
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", obsUrl);
        await JS.InvokeVoidAsync("alert", "URL copied to clipboard!");
    }

    private async Task ToggleGameClock()
    {
        gameClockRunning = !gameClockRunning;

        if (gameClockRunning)
        {
            gameClockTimer?.Start();
            if (showShotClock)
            {
                shotClockRunning = true;
                shotClockTimer?.Start();
            }
        }
        else
        {
            gameClockTimer?.Stop();
            shotClockTimer?.Stop();
            shotClockRunning = false;
        }

        // Notify other clients
        await UpdateScoreboard();
    }

    private async Task ResetGameClock()
    {
        switch (currentScoreboard.SportType)
        {
            case "Basketball":
                gameClockSeconds = 12 * 60;
                shotClock = 24;
                break;
                
            case "Football":
                gameClockSeconds = 15 * 60;
                shotClock = 40;
                break;
                
            case "Soccer":
                gameClockSeconds = 45 * 60;
                break;
                
            case "Hockey":
                gameClockSeconds = 20 * 60;
                break;
        }

        gameClockRunning = false;
        shotClockRunning = false;
        gameClockTimer?.Stop();
        shotClockTimer?.Stop();

        // Reset clock input field
        TimeSpan time = TimeSpan.FromSeconds(gameClockSeconds);
        gameClockInput = $"{time.Minutes}:{time.Seconds:D2}";

        // Notify other clients
        await UpdateScoreboard();
    }

    private async Task SetGameClockFromInput()
    {
        if (string.IsNullOrWhiteSpace(gameClockInput)) return;

        var parts = gameClockInput.Split(':');
        if (parts.Length == 2 && int.TryParse(parts[0], out int minutes) && int.TryParse(parts[1], out int seconds))
        {
            gameClockSeconds = (minutes * 60) + seconds;
            
            // Notify other clients
            await UpdateScoreboard();
        }
    }

    private async Task AdjustGameClock(int seconds)
    {
        gameClockSeconds += seconds;
        
        // Don't allow negative time
        if (gameClockSeconds < 0)
            gameClockSeconds = 0;
            
        // Update the input field
        TimeSpan time = TimeSpan.FromSeconds(gameClockSeconds);
        gameClockInput = $"{time.Minutes}:{time.Seconds:D2}";
        
        // Notify other clients
        await UpdateScoreboard();
    }

    private async Task ResetShotClock(int seconds)
    {
        shotClock = seconds;
        shotClockWarning = false;
        
        if (gameClockRunning && seconds > 0)
        {
            shotClockRunning = true;
            shotClockTimer?.Start();
        }
        else
        {
            shotClockRunning = false;
            shotClockTimer?.Stop();
        }
        
        // Notify other clients
        await UpdateScoreboard();
    }

    private async Task UpdateScore(string team, int points)
    {
        if (team == "home")
        {
            homeScore += points;
            if (homeScore < 0) homeScore = 0;
        }
        else
        {
            awayScore += points;
            if (awayScore < 0) awayScore = 0;
        }
        
        // Notify other clients
        await UpdateScoreboard();
    }

    private async Task UpdateTimeouts(string team, int change)
    {
        if (team == "home")
        {
            homeTimeouts += change;
            if (homeTimeouts < 0) homeTimeouts = 0;
            if (homeTimeouts > maxTimeouts) homeTimeouts = maxTimeouts;
        }
        else
        {
            awayTimeouts += change;
            if (awayTimeouts < 0) awayTimeouts = 0;
            if (awayTimeouts > maxTimeouts) awayTimeouts = maxTimeouts;
        }
        
        // Notify other clients
        await UpdateScoreboard();
    }

    private async Task IncrementPeriod()
    {
        currentPeriod++;
        
        if (currentScoreboard.SportType == "Baseball" && !topInning)
        {
            topInning = true;
        }
        else if (currentScoreboard.SportType == "Baseball")
        {
            topInning = false;
        }
        
        // Notify other clients
        await UpdateScoreboard();
    }
    
    private async Task DecrementPeriod()
    {
        if (currentPeriod > 1)
        {
            currentPeriod--;
            
            if (currentScoreboard.SportType == "Baseball" && topInning)
            {
                topInning = false;
            }
            else if (currentScoreboard.SportType == "Baseball")
            {
                topInning = true;
            }
            
            // Notify other clients
            await UpdateScoreboard();
        }
    }
    
    private async Task TogglePossession(string team)
    {
        possession = team;
        
        // Notify other clients
        await UpdateScoreboard();
    }

    private async Task UpdateScoreboard()
    {
        if (hubConnection != null && hubConnection.State == HubConnectionState.Connected)
        {
            try
            {
                // Create game state object
                var gameState = new
                {
                    ScoreboardId = currentScoreboard.Id,
                    HomeScore = homeScore,
                    AwayScore = awayScore,
                    GameClock = gameClockSeconds,
                    GameClockRunning = gameClockRunning,
                    ShotClock = shotClock,
                    ShotClockRunning = shotClockRunning,
                    CurrentPeriod = currentPeriod,
                    HomeTimeouts = homeTimeouts,
                    AwayTimeouts = awayTimeouts,
                    Possession = possession,
                    TopInning = topInning
                };
                
                // Send update to all connected clients
                await hubConnection.SendAsync("UpdateScoreboardState", currentScoreboard.Id, JsonSerializer.Serialize(gameState));
                
                // Update last update time
                lastUpdateTime = DateTime.Now;
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("console.error", "Error updating scoreboard: " + ex.Message);
            }
        }
    }

    private async Task UpdateHomeScore(int points) => await UpdateScore("home", points);
    private async Task UpdateAwayScore(int points) => await UpdateScore("away", points);
    private async Task UpdateHomeTimeouts(int change) => await UpdateTimeouts("home", change);
    private async Task UpdateAwayTimeouts(int change) => await UpdateTimeouts("away", change);
    private async Task SetPossessionHome() => await TogglePossession("home");
    private async Task SetPossessionNone() => await TogglePossession("none");
    private async Task SetPossessionAway() => await TogglePossession("away");

    public async ValueTask DisposeAsync()
    {
        gameClockTimer?.Dispose();
        shotClockTimer?.Dispose();
        
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}