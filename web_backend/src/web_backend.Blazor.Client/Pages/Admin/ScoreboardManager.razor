@page "/admin/scoreboards"
@using web_backend.Livestreams
@using web_backend.Enums
@using System.Text.Json
@inject ILivestreamAppService LivestreamService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@attribute [Authorize(Roles = "admin")]

<div class="container mt-4">
    <div class="vss-page-title mb-4">
        <h2><i class="bi bi-tv me-2"></i>Scoreboard Manager</h2>
        <p class="text-muted">Create and manage custom scoreboards for your live streams</p>
    </div>

    <div class="row">
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">My Scoreboards</h5>
                </div>
                <div class="card-body">
                    @if (savedScoreboards == null || !savedScoreboards.Any())
                    {
                        <div class="alert alert-info">
                            You haven't created any scoreboards yet.
                        </div>
                    }
                    else
                    {
                        <div class="list-group">
                            @foreach (var scoreboard in savedScoreboards)
                            {
                                <div class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
                                    <div>
                                        <strong>@scoreboard.Name</strong>
                                        <div class="small text-muted">@scoreboard.SportType</div>
                                        <div class="small text-muted">@scoreboard.HomeTeamName vs @scoreboard.AwayTeamName</div>
                                    </div>
                                    <div>
                                        <button class="btn btn-sm btn-primary" @onclick="() => LoadSavedScoreboard(scoreboard)">Edit</button>
                                        <button class="btn btn-sm btn-secondary" @onclick="() => GetOBSUrl(scoreboard)">Get OBS URL</button>
                                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteScoreboard(scoreboard)">Delete</button>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="scoreboard-editor col-md-8">
            <h4>@(_editingExisting ? "Edit Scoreboard" : "Create New Scoreboard")</h4>
            
            <div class="form-group mb-3">
                <label>Scoreboard Name</label>
                <input type="text" class="form-control" @bind="currentScoreboard.Name" placeholder="Enter a name for this scoreboard" />
            </div>
            
            <div class="form-group mb-3">
                <label>Link to Livestream (Optional)</label>
                <select class="form-select" value="@selectedLivestreamId" @onchange="LivestreamSelectionChanged">
                    <option value="">-- Select a livestream --</option>
                    @if (availableLivestreams != null)
                    {
                        @foreach (var livestream in availableLivestreams)
                        {
                            <option value="@livestream.Id">@livestream.HomeTeam vs @livestream.AwayTeam (@livestream.EventDate.ToString("g"))</option>
                        }
                    }
                </select>
            </div>
            
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="form-group">
                        <label>Sport Type</label>
                        <select class="form-select" @bind="currentScoreboard.SportType">
                            @foreach (var sportType in Enum.GetNames(typeof(EventType)))
                            {
                                <option value="@sportType">@sportType</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label>Scoreboard Shape</label>
                        <select class="form-select" @bind="currentScoreboard.ScoreboardShape">
                            <option value="Rectangle">Rectangle</option>
                            <option value="Rounded">Rounded</option>
                            <option value="Pill">Pill</option>
                            <option value="Modern">Modern</option>
                        </select>
                    </div>
                </div>
            </div>
            
            <div class="form-group mb-3">
                <label>Event Title</label>
                <input type="text" class="form-control" @bind="currentScoreboard.EventTitle" placeholder="e.g. Championship Game" />
            </div>
            
            <div class="row mb-4">
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header bg-primary text-white">
                            Home Team
                        </div>
                        <div class="card-body">
                            <div class="form-group mb-2">
                                <label>Team Name</label>
                                <input type="text" class="form-control" @bind="currentScoreboard.HomeTeamName" />
                            </div>
                            <div class="form-group mb-2">
                                <label>Logo URL</label>
                                <input type="text" class="form-control" @bind="currentScoreboard.HomeTeamLogo" />
                            </div>
                            <div class="row mb-2">
                                <div class="col">
                                    <label>Background Color</label>
                                    <input type="color" class="form-control form-control-color" @bind="currentScoreboard.HomeTeamBackgroundColor" />
                                </div>
                                <div class="col">
                                    <label>Text Color</label>
                                    <input type="color" class="form-control form-control-color" @bind="currentScoreboard.HomeTeamTextColor" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header bg-danger text-white">
                            Away Team
                        </div>
                        <div class="card-body">
                            <div class="form-group mb-2">
                                <label>Team Name</label>
                                <input type="text" class="form-control" @bind="currentScoreboard.AwayTeamName" />
                            </div>
                            <div class="form-group mb-2">
                                <label>Logo URL</label>
                                <input type="text" class="form-control" @bind="currentScoreboard.AwayTeamLogo" />
                            </div>
                            <div class="row mb-2">
                                <div class="col">
                                    <label>Background Color</label>
                                    <input type="color" class="form-control form-control-color" @bind="currentScoreboard.AwayTeamBackgroundColor" />
                                </div>
                                <div class="col">
                                    <label>Text Color</label>
                                    <input type="color" class="form-control form-control-color" @bind="currentScoreboard.AwayTeamTextColor" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Scoreboard Appearance</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <div class="form-group mb-2">
                                <label>Background Color</label>
                                <input type="color" class="form-control form-control-color" @bind="currentScoreboard.BackgroundColor" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group mb-2">
                                <label>Text Color</label>
                                <input type="color" class="form-control form-control-color" @bind="currentScoreboard.TextColor" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group mb-2">
                                <label>Border Color</label>
                                <input type="color" class="form-control form-control-color" @bind="currentScoreboard.BorderColor" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group mb-2">
                                <label>Header Color</label>
                                <input type="color" class="form-control form-control-color" @bind="currentScoreboard.HeaderColor" />
                            </div>
                        </div>
                    </div>
                    <div class="form-check mt-3">
                        <input class="form-check-input" type="checkbox" id="showTimeouts" @bind="currentScoreboard.ShowTimeouts" />
                        <label class="form-check-label" for="showTimeouts">
                            Show Timeouts
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="showAdditionalStats" @bind="currentScoreboard.ShowAdditionalStats" />
                        <label class="form-check-label" for="showAdditionalStats">
                            Show Additional Stats
                        </label>
                    </div>
                </div>
            </div>
            
            <div class="mb-4">
                <button class="btn btn-primary btn-lg" @onclick="SaveScoreboard">
                    <i class="bi bi-save me-2"></i>Save Scoreboard
                </button>
                <button class="btn btn-outline-secondary btn-lg ms-2" @onclick="CreateNewScoreboard">
                    <i class="bi bi-plus-circle me-2"></i>Create New
                </button>
                
                @if (currentScoreboard.Id != null)
                {
                    <button class="btn btn-success btn-lg ms-2" @onclick="GetCurrentOBSUrl">
                        <i class="bi bi-broadcast me-2"></i>Get OBS URL
                    </button>
                }
            </div>
            
            @if (showObsUrlDialog)
            {
                <div class="card mb-4">
                    <div class="card-header bg-success text-white">
                        <h5 class="mb-0">OBS Browser Source URL</h5>
                    </div>
                    <div class="card-body">
                        <p>Copy this URL into OBS Studio as a Browser Source:</p>
                        <div class="input-group mb-3">
                            <input type="text" class="form-control" readonly value="@obsUrl" />
                            <button class="btn btn-outline-secondary" type="button" @onclick="CopyObsUrl">
                                <i class="bi bi-clipboard"></i> Copy
                            </button>
                        </div>
                        <div class="mt-3">
                            <h6>OBS Setup Instructions:</h6>
                            <ol>
                                <li>In OBS Studio, add a new "Browser" source</li>
                                <li>Set the width to 800 and height to 200</li>
                                <li>Paste the URL above into the URL field</li>
                                <li>Check "Refresh browser when scene becomes active"</li>
                                <li>Click OK to save</li>
                            </ol>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<LivestreamDto> availableLivestreams;
    private List<SavedScoreboard> savedScoreboards;
    private SavedScoreboard currentScoreboard = new SavedScoreboard();
    private string selectedLivestreamId = "";
    private bool _editingExisting = false;
    private string obsUrl = "";
    private bool showObsUrlDialog = false;

    protected override async Task OnInitializedAsync()
    {
        // Load available livestreams
        try
        {
            availableLivestreams = await LivestreamService.GetListAsync();
            availableLivestreams = availableLivestreams
                .Where(l => l.StreamStatus != StreamStatus.Completed)
                .OrderBy(l => l.EventDate)
                .ToList();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "Error loading livestreams: " + ex.Message);
        }

        // Load saved scoreboards
        await LoadSavedScoreboards();
        
        // Initialize a new scoreboard
        CreateNewScoreboard();
    }

    private async Task LoadSavedScoreboards()
    {
        var json = await JS.InvokeAsync<string>("localStorage.getItem", "savedScoreboards");
        
        if (string.IsNullOrEmpty(json))
        {
            savedScoreboards = new List<SavedScoreboard>();
            return;
        }
        
        try
        {
            savedScoreboards = JsonSerializer.Deserialize<List<SavedScoreboard>>(json) ?? new List<SavedScoreboard>();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "Error loading saved scoreboards: " + ex.Message);
            savedScoreboards = new List<SavedScoreboard>();
        }
    }

    private void CreateNewScoreboard()
    {
        _editingExisting = false;
        showObsUrlDialog = false;
        selectedLivestreamId = "";
        
        currentScoreboard = new SavedScoreboard
        {
            Id = Guid.NewGuid().ToString(),
            Name = "New Scoreboard",
            SportType = EventType.Basketball.ToString(),
            ScoreboardShape = "Rounded",
            EventTitle = "Game Title",
            HomeTeamName = "Home",
            AwayTeamName = "Away",
            HomeTeamLogo = "",
            AwayTeamLogo = "",
            BackgroundColor = "#1a1a1a",
            TextColor = "#ffffff",
            BorderColor = "#333333",
            HeaderColor = "#333333",
            HomeTeamBackgroundColor = "#3366cc",
            HomeTeamTextColor = "#ffffff",
            AwayTeamBackgroundColor = "#cc3333",
            AwayTeamTextColor = "#ffffff",
            ShowTimeouts = true,
            ShowAdditionalStats = true,
            LivestreamId = null
        };
    }

    private void LoadSavedScoreboard(SavedScoreboard scoreboard)
    {
        _editingExisting = true;
        showObsUrlDialog = false;
        currentScoreboard = new SavedScoreboard
        {
            Id = scoreboard.Id,
            Name = scoreboard.Name,
            SportType = scoreboard.SportType,
            ScoreboardShape = scoreboard.ScoreboardShape,
            EventTitle = scoreboard.EventTitle,
            HomeTeamName = scoreboard.HomeTeamName,
            AwayTeamName = scoreboard.AwayTeamName,
            HomeTeamLogo = scoreboard.HomeTeamLogo,
            AwayTeamLogo = scoreboard.AwayTeamLogo,
            BackgroundColor = scoreboard.BackgroundColor,
            TextColor = scoreboard.TextColor,
            BorderColor = scoreboard.BorderColor,
            HeaderColor = scoreboard.HeaderColor,
            HomeTeamBackgroundColor = scoreboard.HomeTeamBackgroundColor,
            HomeTeamTextColor = scoreboard.HomeTeamTextColor,
            AwayTeamBackgroundColor = scoreboard.AwayTeamBackgroundColor,
            AwayTeamTextColor = scoreboard.AwayTeamTextColor,
            ShowTimeouts = scoreboard.ShowTimeouts,
            ShowAdditionalStats = scoreboard.ShowAdditionalStats,
            LivestreamId = scoreboard.LivestreamId
        };
        
        if (!string.IsNullOrEmpty(scoreboard.LivestreamId))
        {
            selectedLivestreamId = scoreboard.LivestreamId;
        }
    }

    private async Task LivestreamSelectionChanged(ChangeEventArgs e)
    {
        var livestreamId = e.Value.ToString();
        
        if (string.IsNullOrEmpty(livestreamId))
        {
            return;
        }
        
        var selectedLivestream = availableLivestreams.FirstOrDefault(l => l.Id.ToString() == livestreamId);
        
        if (selectedLivestream != null)
        {
            currentScoreboard.HomeTeamName = selectedLivestream.HomeTeam;
            currentScoreboard.AwayTeamName = selectedLivestream.AwayTeam;
            currentScoreboard.EventTitle = $"{selectedLivestream.HomeTeam} vs {selectedLivestream.AwayTeam}";
            currentScoreboard.SportType = selectedLivestream.EventType.ToString();
            currentScoreboard.LivestreamId = livestreamId;
            
            // Update scoreboard name if it hasn't been customized
            if (currentScoreboard.Name == "New Scoreboard")
            {
                currentScoreboard.Name = $"{selectedLivestream.HomeTeam} vs {selectedLivestream.AwayTeam} Scoreboard";
            }
        }
    }

    private async Task SaveScoreboard()
    {
        if (savedScoreboards == null)
        {
            savedScoreboards = new List<SavedScoreboard>();
        }
        
        // Check if we're updating an existing scoreboard
        var existingIndex = savedScoreboards.FindIndex(s => s.Id == currentScoreboard.Id);
        
        if (existingIndex >= 0)
        {
            savedScoreboards[existingIndex] = currentScoreboard;
        }
        else
        {
            savedScoreboards.Add(currentScoreboard);
        }
        
        // Save to localStorage
        var json = JsonSerializer.Serialize(savedScoreboards);
        await JS.InvokeVoidAsync("localStorage.setItem", "savedScoreboards", json);
        
        await JS.InvokeVoidAsync("alert", "Scoreboard saved successfully!");
    }

    private async Task DeleteScoreboard(SavedScoreboard scoreboard)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the scoreboard '{scoreboard.Name}'?");
        
        if (!confirmed)
        {
            return;
        }
        
        savedScoreboards.Remove(scoreboard);
        
        // Save to localStorage
        var json = JsonSerializer.Serialize(savedScoreboards);
        await JS.InvokeVoidAsync("localStorage.setItem", "savedScoreboards", json);
        
        await JS.InvokeVoidAsync("alert", "Scoreboard deleted successfully!");
    }

    private void GetOBSUrl(SavedScoreboard scoreboard)
    {
        var baseUri = NavigationManager.ToAbsoluteUri("/scoreboard/overlay");
        obsUrl = $"{baseUri}?admin=false&id={scoreboard.Id}";
        showObsUrlDialog = true;
    }

    private void GetCurrentOBSUrl()
    {
        var baseUri = NavigationManager.ToAbsoluteUri("/scoreboard/overlay");
        obsUrl = $"{baseUri}?admin=false&id={currentScoreboard.Id}";
        showObsUrlDialog = true;
    }

    private async Task CopyObsUrl()
    {
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", obsUrl);
        await JS.InvokeVoidAsync("alert", "URL copied to clipboard!");
    }

    public class SavedScoreboard
    {
        public string Id { get; set; } = "";
        public string Name { get; set; } = "";
        public string SportType { get; set; } = "";
        public string ScoreboardShape { get; set; } = "";
        public string EventTitle { get; set; } = "";
        public string HomeTeamName { get; set; } = "";
        public string AwayTeamName { get; set; } = "";
        public string HomeTeamLogo { get; set; } = "";
        public string AwayTeamLogo { get; set; } = "";
        public string BackgroundColor { get; set; } = "";
        public string TextColor { get; set; } = "";
        public string BorderColor { get; set; } = "";
        public string HeaderColor { get; set; } = "";
        public string HomeTeamBackgroundColor { get; set; } = "";
        public string HomeTeamTextColor { get; set; } = "";
        public string AwayTeamBackgroundColor { get; set; } = "";
        public string AwayTeamTextColor { get; set; } = "";
        public bool ShowTimeouts { get; set; } = true;
        public bool ShowAdditionalStats { get; set; } = true;
        public string LivestreamId { get; set; } = null;
    }
}