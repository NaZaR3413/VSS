@page "/admin/games"
@using System.Net.Http.Json
@using web_backend.Games
@using web_backend.Enums
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient HttpClient
@inject IJSRuntime JS

<AuthorizeView Roles="admin" Context="auth">
    <Authorized>
        <div class="container">
            <h2 class="my-4">Games Management</h2>

            <div class="card mb-4">
                <div class="card-header">
                    <h4>Upload New Game</h4>
                </div>
                <div class="card-body">
                    <EditForm Model="newGame" OnValidSubmit="UploadGame" id="uploadForm">
                        <DataAnnotationsValidator />
                        <Microsoft.AspNetCore.Components.Forms.ValidationSummary />

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="homeTeam" class="form-label">Home Team</label>
                                <InputText id="homeTeam" class="form-control" @bind-Value="newGame.HomeTeam" />
                            </div>

                            <div class="col-md-6 mb-3">
                                <label for="awayTeam" class="form-label">Away Team</label>
                                <InputText id="awayTeam" class="form-control" @bind-Value="newGame.AwayTeam" />
                            </div>

                            <div class="col-md-6 mb-3">
                                <label for="homeScore" class="form-label">Home Score</label>
                                <InputNumber id="homeScore" class="form-control" @bind-Value="newGame.HomeScore" />
                            </div>

                            <div class="col-md-6 mb-3">
                                <label for="awayScore" class="form-label">Away Score</label>
                                <InputNumber id="awayScore" class="form-control" @bind-Value="newGame.AwayScore" />
                            </div>

                            <div class="col-md-6 mb-3">
                                <label for="broadcasters" class="form-label">Broadcasters</label>
                                <InputText id="broadcasters" class="form-control" @bind-Value="newGame.Broadcasters" />
                            </div>

                            <div class="col-md-6 mb-3">
                                <label for="eventType" class="form-label">Event Type</label>
                                <InputSelect id="eventType" class="form-control" @bind-Value="newGame.EventType">
                                    <option value="@EventType.Football">Football</option>
                                    <option value="@EventType.Basketball">Basketball</option>
                                    <option value="@EventType.Baseball">Baseball</option>
                                    <option value="@EventType.Softball">Softball</option>
                                    <option value="@EventType.Lacrosse">Lacrosse</option>
                                    <option value="@EventType.Rugby">Rugby</option>
                                    <option value="@EventType.Soccer">Soccer</option>
                                    <option value="@EventType.Tennis">Tennis</option>
                                    <option value="@EventType.Volleyball">Volleyball</option>
                                    <option value="@EventType.Hockey">Hockey</option>
                                </InputSelect>
                            </div>

                            <div class="col-md-6 mb-3">
                                <label for="eventDate" class="form-label">Event Date</label>
                                <InputDate id="eventDate" class="form-control" @bind-Value="newGame.EventDate" />
                            </div>

                            <div class="col-md-12 mb-3">
                                <label for="description" class="form-label">Description</label>
                                <InputTextArea id="description" class="form-control" @bind-Value="newGame.Description" rows="3" />
                            </div>

                            <div class="col-md-12 mb-3">
                                <label for="videoFile" class="form-label">Game Video</label>
                                <InputFile id="videoFile" OnChange="OnFileChange" class="form-control" accept="video/mp4" />
                                @if (isUploading)
                                {
                                    <div class="mt-2">
                                        <div class="progress">
                                            <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                                role="progressbar" 
                                                style="width: @uploadProgress%">
                                                @uploadProgress%
                                            </div>
                                        </div>
                                    </div>
                                }
                                <div class="form-text">Upload MP4 video file of the game recording.</div>
                            </div>
                        </div>

                        <div class="mt-3">
                            <button type="submit" class="btn btn-primary" disabled="@isUploading">
                                @if (isUploading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>Uploading...</span>
                                }
                                else
                                {
                                    <span>Upload Game</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>

            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">Filter Games</h4>
                    <button class="btn btn-sm btn-outline-secondary" @onclick="ResetFilters">Reset Filters</button>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4 mb-3">
                            <label for="filterEventType" class="form-label">Event Type</label>
                            <select id="filterEventType" class="form-select" @bind="filters.EventType">
                                <option value="">All Event Types</option>
                                <option value="@EventType.Football">Football</option>
                                <option value="@EventType.Basketball">Basketball</option>
                                <option value="@EventType.Baseball">Baseball</option>
                                <option value="@EventType.Softball">Softball</option>
                                <option value="@EventType.Lacrosse">Lacrosse</option>
                                <option value="@EventType.Rugby">Rugby</option>
                                <option value="@EventType.Soccer">Soccer</option>
                                <option value="@EventType.Tennis">Tennis</option>
                                <option value="@EventType.Volleyball">Volleyball</option>
                                <option value="@EventType.Hockey">Hockey</option>
                            </select>
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="filterHomeTeam" class="form-label">Home Team</label>
                            <input id="filterHomeTeam" class="form-control" @bind="filters.HomeTeam" />
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="filterAwayTeam" class="form-label">Away Team</label>
                            <input id="filterAwayTeam" class="form-control" @bind="filters.AwayTeam" />
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="filterBroadcasters" class="form-label">Broadcasters</label>
                            <input id="filterBroadcasters" class="form-control" @bind="filters.Broadcasters" />
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="filterEventDate" class="form-label">Event Date</label>
                            <input type="date" id="filterEventDate" class="form-control" @bind="filterDate" />
                        </div>
                        <div class="col-md-12">
                            <button class="btn btn-primary" @onclick="ApplyFilters">Apply Filters</button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <h4>Games List</h4>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="d-flex justify-content-center my-5">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (games == null || !games.Any())
                    {
                        <p class="text-center my-5">No games found. Upload a game to get started.</p>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Teams</th>
                                        <th>Score</th>
                                        <th>Date</th>
                                        <th>Sport</th>
                                        <th>Broadcasters</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var game in games)
                                    {
                                        <tr>
                                            <td>@game.HomeTeam vs @game.AwayTeam</td>
                                            <td>@game.HomeScore - @game.AwayScore</td>
                                            <td>@game.EventDate.ToString("MMM d, yyyy")</td>
                                            <td>@game.EventType</td>
                                            <td>@game.Broadcasters</td>
                                            <td>
                                                <div class="btn-group">
                                                    <a href="/games/@game.Id" class="btn btn-sm btn-outline-primary">
                                                        View
                                                    </a>
                                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteGame(game.Id)">
                                                        Delete
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="alert alert-danger m-4" role="alert">
            You do not have permission to view this page. Please contact an administrator.
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<GameDto> games = new();
    private CreateGameDto newGame = new() { EventDate = DateTime.Today };
    private IBrowserFile selectedFile;
    private bool isUploading = false;
    private bool isLoading = true;
    private int uploadProgress = 0;
    private GameFilterDto filters = new();
    private DateTime? filterDate = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadGames();
    }

    private async Task LoadGames()
    {
        try
        {
            isLoading = true;
            games = await HttpClient.GetFromJsonAsync<List<GameDto>>("/api/app/game");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error loading games: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void OnFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    private async Task UploadGame()
    {
        if (selectedFile == null)
        {
            await JS.InvokeVoidAsync("alert", "Please select a video file to upload.");
            return;
        }

        try
        {
            isUploading = true;
            uploadProgress = 0;

            var timer = new System.Threading.Timer(_ =>
            {
                uploadProgress += 5;
                if (uploadProgress > 95) uploadProgress = 95;
                InvokeAsync(StateHasChanged);
            }, null, 0, 200);

            var content = new MultipartFormDataContent();

            content.Add(new StringContent(newGame.HomeTeam ?? ""), "HomeTeam");
            content.Add(new StringContent(newGame.AwayTeam ?? ""), "AwayTeam");
            content.Add(new StringContent(newGame.HomeScore.ToString()), "HomeScore");
            content.Add(new StringContent(newGame.AwayScore.ToString()), "AwayScore");
            content.Add(new StringContent(newGame.Broadcasters ?? ""), "Broadcasters");
            content.Add(new StringContent(newGame.Description ?? ""), "Description");
            content.Add(new StringContent(newGame.EventDate.ToString("o")), "EventDate");
            content.Add(new StringContent(((int)newGame.EventType).ToString()), "EventType");

            var fileContent = new StreamContent(selectedFile.OpenReadStream(long.MaxValue));
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("video/mp4");

            content.Add(fileContent, "VideoFile", selectedFile.Name);

            try
            {
                await JS.InvokeVoidAsync("console.log", $"Uploading file: {selectedFile.Name}, Size: {selectedFile.Size} bytes");

                var response = await HttpClient.PostAsync("/api/app/game", content);

                await timer.DisposeAsync();
                uploadProgress = 100;
                await InvokeAsync(StateHasChanged);

                if (response.IsSuccessStatusCode)
                {
                    await JS.InvokeVoidAsync("alert", "Game uploaded successfully!");
                    newGame = new CreateGameDto { EventDate = DateTime.Today };
                    selectedFile = null;

                    await LoadGames();
                }
                else
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    await JS.InvokeVoidAsync("console.error", $"Error response: {(int)response.StatusCode} - {errorMessage}");
                    await JS.InvokeVoidAsync("alert", $"Error uploading game: {errorMessage}");
                }
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("console.error", $"Exception during upload: {ex.Message}");
                await JS.InvokeVoidAsync("alert", $"Error during upload: {ex.Message}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
        finally
        {
            isUploading = false;
        }
    }


    private async Task DeleteGame(Guid id)
    {
        if (!await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this game? This action cannot be undone."))
        {
            return;
        }

        try
        {
            isLoading = true;
            var response = await HttpClient.DeleteAsync($"/api/app/game/{id}");
            
            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Game deleted successfully!");
                await LoadGames();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Error deleting game: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ApplyFilters()
    {
        try
        {
            isLoading = true;

            if (filterDate.HasValue)
            {
                filters.EventDate = filterDate.Value;
            }
            else
            {
                filters.EventDate = null;
            }

            var queryParams = new List<string>();

            if (filters.EventType.HasValue)
                queryParams.Add($"EventType={Uri.EscapeDataString(((int)filters.EventType.Value).ToString())}");

            if (!string.IsNullOrEmpty(filters.HomeTeam))
                queryParams.Add($"HomeTeam={Uri.EscapeDataString(filters.HomeTeam)}");

            if (!string.IsNullOrEmpty(filters.AwayTeam))
                queryParams.Add($"AwayTeam={Uri.EscapeDataString(filters.AwayTeam)}");

            if (!string.IsNullOrEmpty(filters.Broadcasters))
                queryParams.Add($"Broadcasters={Uri.EscapeDataString(filters.Broadcasters)}");

            if (filters.EventDate.HasValue)
                queryParams.Add($"EventDate={Uri.EscapeDataString(filters.EventDate.Value.ToString("o"))}");

            var queryString = queryParams.Count > 0 ? "?" + string.Join("&", queryParams) : "";

            var response = await HttpClient.GetAsync($"/api/app/game/filtered-list{queryString}");

            if (response.IsSuccessStatusCode)
            {
                games = await response.Content.ReadFromJsonAsync<List<GameDto>>();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Error applying filters: {errorMessage}");
                await LoadGames();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ResetFilters()
    {
        filters = new GameFilterDto();
        filterDate = null;
        await LoadGames();
    }
}
