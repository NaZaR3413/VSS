@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject IJSRuntime JS

<AuthorizeView>
    <Authorized>
        <div class="d-flex align-items-center">
            <div class="user-info me-3">
                Hello, @GetDisplayName()
            </div>
            <button class="btn btn-outline-light btn-sm" @onclick="BeginSignOut">
                <i class="bi bi-box-arrow-right me-1"></i> Logout
            </button>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="d-flex">
            <a href="/Account/Login" class="btn btn-outline-light btn-sm me-2">
                <i class="bi bi-box-arrow-in-right me-1"></i> Login
            </a>
            <a href="/Account/Register" class="btn btn-light btn-sm">
                <i class="bi bi-person-plus me-1"></i> Register
            </a>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private async Task BeginSignOut()
    {
        await JS.InvokeVoidAsync("console.log", "Signing out...");
        
        // Navigate to the backend logout endpoint and force refresh
        var logoutUrl = "https://vss-backend-api-fmbjgachhph9byce.westus2-01.azurewebsites.net/Account/Logout";
        Navigation.NavigateTo(logoutUrl, forceLoad: true);
    }
    
    private string GetDisplayName()
    {
        var authState = AuthenticationStateProvider.GetAuthenticationStateAsync().Result;
        var user = authState.User;
        
        if (user.Identity?.IsAuthenticated != true)
            return string.Empty;
            
        var name = user.FindFirst(c => c.Type == ClaimTypes.Name)?.Value;
        if (!string.IsNullOrEmpty(name))
            return name;
            
        var givenName = user.FindFirst(c => c.Type == ClaimTypes.GivenName)?.Value;
        if (!string.IsNullOrEmpty(givenName))
            return givenName;
            
        return user.Identity.Name ?? "User";
    }
}