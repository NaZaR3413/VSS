@page "/gaming"
@using System.Net.Http.Json
@using web_backend.Games
@using web_backend.Enums
@using Microsoft.AspNetCore.Components.Forms
@using System.IO
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>Gaming</h3>

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h3>Upload Game</h3>
            </div>
            <div class="card-body">
                <EditForm Model="@gameUploadDto" OnValidSubmit="HandleValidSubmit" enctype="multipart/form-data">
                    <DataAnnotationsValidator />
                    <Microsoft.AspNetCore.Components.Forms.ValidationSummary />

                    <div class="form-group">
                        <label for="gameUrl">Game URL:</label>
                        <InputText id="gameUrl" @bind-value="gameUploadDto.GameUrl" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label for="homeTeam">Home Team:</label>
                        <InputText id="homeTeam" @bind-value="gameUploadDto.HomeTeam" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label for="awayTeam">Away Team:</label>
                        <InputText id="awayTeam" @bind-value="gameUploadDto.AwayTeam" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label for="homeScore">Home Score:</label>
                        <InputNumber id="homeScore" @bind-value="gameUploadDto.HomeScore" class="form-control" TValue="int" />
                    </div>

                    <div class="form-group">
                        <label for="awayScore">Away Score:</label>
                        <InputNumber id="awayScore" @bind-value="gameUploadDto.AwayScore" class="form-control" TValue="int" />
                    </div>

                    <div class="form-group">
                        <label for="broadcasters">Broadcasters:</label>
                        <InputText id="broadcasters" @bind-value="gameUploadDto.Broadcasters" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label for="description">Description:</label>
                        <InputTextArea id="description" @bind-value="gameUploadDto.Description" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label for="eventDate">Event Date:</label>
                        <InputDate id="eventDate" @bind-value="gameUploadDto.EventDate" class="form-control" TValue="DateTime" />
                    </div>

                    <div class="form-group">
                        <label for="eventType">Event Type:</label>
                        <InputSelect id="eventType" @bind-value="gameUploadDto.EventType" class="form-control" TValue="EventType">
                            @foreach (EventType type in Enum.GetValues(typeof(EventType)))
                            {
                                <option value="@type">@type</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="form-group">
                        <label for="videoFile">Video File:</label>
                        <InputFile id="videoFile" OnChange="HandleFileSelection" class="form-control" />
                    </div>

                    <button type="submit" class="btn btn-primary mt-3">Upload Game</button>
                </EditForm>
            </div>
        </div>
    </div>

    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h3>Games List</h3>
            </div>
            <div class="card-body">
                @if (games == null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Teams</th>
                                <th>Score</th>
                                <th>Date</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var game in games)
                            {
                                <tr>
                                    <td>@game.HomeTeam vs @game.AwayTeam</td>
                                    <td>@game.HomeScore - @game.AwayScore</td>
                                    <td>@game.EventDate.ToShortDateString()</td>
                                    <td>
                                        <button class="btn btn-primary" @onclick="() => ViewGame(game.Id)">View</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private GameUploadDto gameUploadDto = new GameUploadDto();
    private List<GameDto>? games;
    private IBrowserFile? selectedFile;

    protected override async Task OnInitializedAsync()
    {
        await LoadGames();
        gameUploadDto.EventDate = DateTime.Now;
    }

    private async Task LoadGames()
    {
        try
        {
            games = await Http.GetFromJsonAsync<List<GameDto>>("api/app/game");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading games: {ex.Message}");
        }
    }

    private void HandleFileSelection(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (selectedFile == null)
            {
                Console.WriteLine("No file selected.");
                return;
            }

            // Create a MultipartFormDataContent to send the form data
            using var content = new MultipartFormDataContent();

            // Add all text fields
            content.Add(new StringContent(gameUploadDto.GameUrl ?? ""), "GameUrl");
            content.Add(new StringContent(gameUploadDto.HomeTeam), "HomeTeam");
            content.Add(new StringContent(gameUploadDto.AwayTeam), "AwayTeam");
            content.Add(new StringContent(gameUploadDto.HomeScore.ToString()), "HomeScore");
            content.Add(new StringContent(gameUploadDto.AwayScore.ToString()), "AwayScore");
            content.Add(new StringContent(gameUploadDto.Broadcasters ?? ""), "Broadcasters");
            content.Add(new StringContent(gameUploadDto.Description), "Description");
            content.Add(new StringContent(gameUploadDto.EventDate.ToString("o")), "EventDate");
            content.Add(new StringContent(gameUploadDto.EventType.ToString()), "EventType");

            // Add the file
            var fileContent = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 100_000_000));
            content.Add(
                content: fileContent,
                name: "VideoFile",
                fileName: selectedFile.Name);

            // Send the request
            var response = await Http.PostAsync("api/app/game", content);

            if (response.IsSuccessStatusCode)
            {
                // Reset the form
                gameUploadDto = new GameUploadDto();
                gameUploadDto.EventDate = DateTime.Now;
                selectedFile = null;

                // Reload games list
                await LoadGames();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void ViewGame(Guid id)
    {
        NavigationManager.NavigateTo($"/gaming/{id}");
    }

    // Class to match the server-side CreateGameDto
    private class GameUploadDto
    {
        public string? GameUrl { get; set; } = string.Empty;
        public string HomeTeam { get; set; } = string.Empty;
        public string AwayTeam { get; set; } = string.Empty;
        public int HomeScore { get; set; } = 0;
        public int AwayScore { get; set; } = 0;
        public string? Broadcasters { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public DateTime EventDate { get; set; } = DateTime.Now;
        public EventType EventType { get; set; } = EventType.Football;
    }
}
