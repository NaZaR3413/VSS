@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@using web_backend.Livestreams
@using System.Linq
@using Microsoft.AspNetCore.Components.Web
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ILivestreamAppService LivestreamService
@inject IJSRuntime JS
@using web_backend.Enums
@implements IDisposable

<HeadContent>
    <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
    <script src="js/hlsPlayer.js"></script>
</HeadContent>

<div class="vss-page">
    <header class="vss-header navbar navbar-expand-lg">
        <!-- Logo -->
        <a class="vss-header__logo navbar-brand" href="/">
            <img src="/images/varsitylogoempty.jpg" alt="VSS Company Header Logo" width="120" />
        </a>

        <!-- Navbar Toggler for Mobile View -->
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#vssNavbar" aria-controls="vssNavbar" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <!-- Navigation Bar with Links and Dropdowns -->
        <nav class="collapse navbar-collapse vss-header" id="vssNavbar">
            <ul class="vss-nav navbar-nav me-auto mb-2 mb-lg-0">
                <li class="vss-nav__item nav-item">
                    <a class="vss-nav__link nav-link" href="/">
                        Home
                        <svg><rect x="0" y="0" width="100%" height="100%"></rect></svg>
                    </a>
                </li>

                <li class="vss-nav__item nav-item">
                    @if (activeLivestreams != null && activeLivestreams.Any())
                    {
                        <div class="dropdown">
                            <a class="vss-nav__link nav-link dropdown-toggle" href="#" id="livestreamDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                Livestreams (@activeLivestreams.Count)
                                <svg><rect x="0" y="0" width="100%" height="100%"></rect></svg>
                            </a>
                            <ul class="vss-dropdown dropdown-menu" aria-labelledby="livestreamDropdown">
                                @foreach (var stream in activeLivestreams)
                                {
                                    <li class="vss-dropdown__item">
                                        <a class="vss-dropdown__link dropdown-item" href="/livestream/@stream.Id" @onclick="@(() => NavigateToLivestream(stream.Id.ToString()))" @onclick:preventDefault>
                                            @(!string.IsNullOrEmpty(stream.HomeTeam) && !string.IsNullOrEmpty(stream.AwayTeam)
                                                ? $"{stream.HomeTeam} vs {stream.AwayTeam}"
                                                : $"Livestream {stream.Id.ToString().Substring(0, 8)}")
                                            <span class="badge bg-danger">LIVE</span>
                                        </a>
                                    </li>
                                }
                            </ul>
                        </div>
                    }
                    else if (fallbackLivestreamId != Guid.Empty)
                    {
                        <a class="vss-nav__link nav-link" href="/livestream/@fallbackLivestreamId" @onclick="@(() => NavigateToLivestream(fallbackLivestreamId.ToString()))" @onclick:preventDefault>
                            Livestreams
                            <svg><rect x="0" y="0" width="100%" height="100%"></rect></svg>
                        </a>
                    }
                    else
                    {
                        <a class="vss-nav__link nav-link disabled" href="#">
                            Livestreams
                            <svg><rect x="0" y="0" width="100%" height="100%"></rect></svg>
                        </a>
                    }
                </li>

                <li class="vss-nav__item nav-item">
                    <a class="vss-nav__link nav-link" href="/schedule">
                        Sport Schedules
                        <svg><rect x="0" y="0" width="100%" height="100%"></rect></svg>
                    </a>
                </li>
                <li class="vss-nav__item nav-item">
                    <a class="vss-nav__link nav-link" href="/contact">
                        Contact Us
                        <svg><rect x="0" y="0" width="100%" height="100%"></rect></svg>
                    </a>
                </li>

                @if (authState != null && authState.User.IsInRole("admin"))
                {
                    <li class="vss-nav__item nav-item dropdown">
                        <a class="vss-nav__link nav-link dropdown-toggle" href="#" id="adminDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            Admin
                            <svg><rect x="0" y="0" width="100%" height="100%"></rect></svg>
                        </a>
                        <ul class="vss-dropdown dropdown-menu" aria-labelledby="adminDropdown">
                            <li class="vss-dropdown__item">
                                <a class="vss-dropdown__link dropdown-item" href="admin/create-livestream">
                                    Create Livestream
                                </a>
                            </li>
                            <li class="vss-dropdown__item">
                                <a class="vss-dropdown__link dropdown-item" href="/admin/manage-livestreams">
                                    Manage Livestreams
                                </a>
                            </li>
                            <li class="vss-dropdown__item">
                                <a class="vss-dropdown__link dropdown-item" href="/admin/teams">
                                    Manage Teams
                                </a>
                            </li>
                            <li class="vss-dropdown__item">
                                <a class="vss-dropdown__link dropdown-item" href="/admin/gametimes">
                                    Edit Schedule
                                </a>
                            </li>
                            <li class="vss-dropdown__item">
                                <a class="vss-dropdown__link dropdown-item" href="/admin/scores">
                                    Update Scores
                                </a>
                            </li>
                        </ul>
                    </li>
                }
            </ul>

            <div class="vss-auth d-flex">
                @if (authState == null)
                {
                    <span class="vss-auth__username navbar-text me-3">Loading...</span>
                }
                else if (authState.User.Identity?.IsAuthenticated ?? false)
                {
                    <span class="vss-auth__username navbar-text me-3">Hello, @authState.User.Identity.Name</span>
                    <a class="vss-auth__link nav-link" href="/Account/Logout">Logout</a>
                }
                else
                {
                    <a class="vss-auth__button btn me-3" href="/authentication/Login">
                        Login
                        <svg><rect x="0" y="0" width="100%" height="100%"></rect></svg>
                    </a>
                    <a class="vss-auth__button btn" href="/Account/Register">
                        Register
                        <svg><rect x="0" y="0" width="100%" height="100%"></rect></svg>
                    </a>
                }
            </div>
        </nav>
    </header>

    <!-- Main Content Area -->
    <main class="vss-main">
        @Body
    </main>
</div>

@code {
    private AuthenticationState authState;
    private List<LivestreamDto> activeLivestreams = new List<LivestreamDto>();

    // Known working fallback livestream ID
    private Guid fallbackLivestreamId = Guid.Parse("e7dd52a1-fbad-33d1-6cf4-3a194a5ebc8b");

    // Known HLS stream key - direct reference to the key without Guid formatting
    private string directHlsKey = "e7dd52a1-fbad-33d1-6cf4-3a194a5ebc8b";

    private System.Threading.Timer refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        // Set up timer to periodically refresh active livestreams - checking more frequently (every 15 seconds)
        refreshTimer = new System.Threading.Timer(async _ =>
        {
            await RefreshLivestreams();
            await InvokeAsync(StateHasChanged);
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(15));

        await RefreshLivestreams();
    }

    private async Task RefreshLivestreams()
    {
        try
        {
            await JS.InvokeVoidAsync("console.log", "Refreshing livestreams list...");
            var allStreams = await LivestreamService.GetListAsync();

            // Debug output to see what's happening with the data
            await JS.InvokeVoidAsync("console.log", $"Total streams: {allStreams.Count}");

            foreach (var stream in allStreams)
            {
                await JS.InvokeVoidAsync("console.log",
                    $"Stream ID: {stream.Id}, Status: {stream.StreamStatus} ({(int)stream.StreamStatus}), " +
                    $"Teams: '{stream.HomeTeam ?? "null"}' vs '{stream.AwayTeam ?? "null"}'");
            }

            // ONLY include streams that have status EXACTLY equal to StreamStatus.Live (value 2)
            activeLivestreams = allStreams
                .Where(l => l.StreamStatus == StreamStatus.Live)
                .OrderByDescending(l => l.Id)
                .ToList();

            await JS.InvokeVoidAsync("console.log", $"Found {activeLivestreams.Count} LIVE streams");

            if (!activeLivestreams.Any())
            {
                await JS.InvokeVoidAsync("console.log", $"No active livestreams found, using fallback ID: {fallbackLivestreamId}");

                // Try to get the fallback livestream details, but DON'T add it if not Live
                try
                {
                    var fallbackStream = await LivestreamService.GetAsync(fallbackLivestreamId);
                    if (fallbackStream != null && fallbackStream.StreamStatus == StreamStatus.Live)
                    {
                        await JS.InvokeVoidAsync("console.log", $"Loaded fallback stream: {fallbackStream.HomeTeam} vs {fallbackStream.AwayTeam}");
                        activeLivestreams.Add(fallbackStream);
                    }
                    else
                    {
                        await JS.InvokeVoidAsync("console.log", $"Fallback stream found but not LIVE: {fallbackStream?.StreamStatus}");
                    }
                }
                catch (Exception ex)
                {
                    await JS.InvokeVoidAsync("console.error", $"Error loading fallback livestream: {ex.Message}");
                }
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"Error fetching livestreams: {ex.Message}");
        }
    }

    private void NavigateToLivestream(string livestreamId)
    {
        var url = $"/livestream/{livestreamId}";
        JS.InvokeVoidAsync("console.log", $"Navigating to livestream: {url}");
        NavigationManager.NavigateTo(url, forceLoad: true);
    }

    public void Dispose()
    {
        // Clean up timer when component is disposed
        refreshTimer?.Dispose();
    }
}
