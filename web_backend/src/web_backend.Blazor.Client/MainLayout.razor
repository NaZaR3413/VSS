@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@using web_backend.Blazor.Client.Services
@using web_backend.Livestreams
@using System.Linq
@using Microsoft.AspNetCore.Components.Web
@using web_backend.Blazor.Client.Pages.Components
@using web_backend.Enums
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ILivestreamAppService LivestreamService
@inject IJSRuntime JS
@inject DebugService DebugService
@implements IDisposable

<HeadContent>
    <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
    <script src="js/hlsPlayer.js"></script>
    <script src="js/notifications.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" rel="stylesheet">
</HeadContent>


<div class="vss-page">
    <header class="vss-header navbar navbar-expand-lg">
        <!-- Logo -->
        <a class="vss-header__logo navbar-brand" href="/landing">
            <img src="/images/varsitylogoempty.jpg" alt="VSS Company Header Logo" width="120" />
        </a>

        <!-- Navbar Toggler for Mobile View -->
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#vssNavbar" aria-controls="vssNavbar" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <!-- Navigation Bar with Links and Dropdowns -->
        <nav class="collapse navbar-collapse vss-header" id="vssNavbar">
            <ul class="vss-nav navbar-nav me-auto mb-2 mb-lg-0">
                <li class="vss-nav__item nav-item">
                    <a class="vss-nav__link nav-link" href="/landing">
                        Home
                        <svg><rect x="0" y="0" width="100%" height="100%"></rect></svg>
                    </a>
                </li>

                <li class="vss-nav__item nav-item">
                    @if (activeLivestreams != null && activeLivestreams.Any())
                    {
                        <div class="dropdown">
                            <a class="vss-nav__link nav-link dropdown-toggle" href="#" id="livestreamDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                Livestreams (@activeLivestreams.Count)
                                <svg><rect x="0" y="0" width="100%" height="100%"></rect></svg>
                            </a>
                            <ul class="vss-dropdown dropdown-menu" aria-labelledby="livestreamDropdown">
                                @foreach (var stream in activeLivestreams)
                                {
                                    <li class="vss-dropdown__item">
                                        <a class="vss-dropdown__link dropdown-item" href="/livestream/@stream.Id" @onclick="@(() => NavigateToLivestream(stream.Id.ToString()))" @onclick:preventDefault>
                                            @(!string.IsNullOrEmpty(stream.HomeTeam) && !string.IsNullOrEmpty(stream.AwayTeam)
                                                ? $"{stream.HomeTeam} vs {stream.AwayTeam}"
                                                : $"Livestream {stream.Id.ToString().Substring(0, 8)}")
                                            <span class="badge bg-danger">LIVE</span>
                                        </a>
                                    </li>
                                }
                            </ul>
                        </div>
                    }
                    else
                    {
                        <a class="vss-nav__link nav-link" href="#" @onclick="ShowNoLivestreamsNotification" @onclick:preventDefault>
                            Livestreams
                            <svg><rect x="0" y="0" width="100%" height="100%"></rect></svg>
                        </a>
                    }
                </li>

                <li class="vss-nav__item nav-item">
                    <a class="vss-nav__link nav-link" href="/schedule">
                        Sport Schedules
                        <svg><rect x="0" y="0" width="100%" height="100%"></rect></svg>
                    </a>
                </li>
                <li class="vss-nav__item nav-item">
                    <a class="vss-nav__link nav-link" href="/contact">
                        Contact Us
                        <svg><rect x="0" y="0" width="100%" height="100%"></rect></svg>
                    </a>
                </li>

                <AuthorizeView Roles="admin">
                    <Authorized>
                        <li class="vss-nav__item nav-item dropdown">
                            <a class="vss-nav__link nav-link dropdown-toggle" href="#" id="adminDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                Admin
                                <svg><rect x="0" y="0" width="100%" height="100%"></rect></svg>
                            </a>
                            <ul class="vss-dropdown dropdown-menu" aria-labelledby="adminDropdown">
                                <li class="vss-dropdown__item">
                                    <a class="vss-dropdown__link dropdown-item" href="admin/create-livestream">
                                        Create Livestream
                                    </a>
                                </li>
                                <li class="vss-dropdown__item">
                                    <a class="vss-dropdown__link dropdown-item" href="/admin/manage-livestreams">
                                        Manage Livestreams
                                    </a>
                                </li>
                            </ul>
                        </li>
                    </Authorized>
                </AuthorizeView>
            </ul>

            <div class="vss-auth d-flex">
                <!-- Use our new LoginStatus component -->
                <web_backend.Blazor.Client.Pages.Authentication.LoginStatus />
            </div>
        </nav>
    </header>

    <!-- Livestream Notification Banner (will be shown/hidden via JS) -->
    <div id="livestream-banner" class="alert alert-info text-center mb-0 py-3" style="display: none; border-radius: 0;">
        <i class="bi bi-info-circle-fill me-2"></i>
        <span id="livestream-banner-message">No active livestreams available at the moment. Please check back later.</span>
        <button type="button" class="btn-close float-end" onclick="document.getElementById('livestream-banner').style.display='none'"></button>
    </div>

    <!-- Main Content Area -->
    <main class="vss-main">
        @Body
    </main>
</div>

@code {
    private List<LivestreamDto> activeLivestreams = new List<LivestreamDto>();
    private System.Threading.Timer? refreshTimer;
    private DateTimeOffset lastRefreshTime = DateTimeOffset.MinValue;

    [CascadingParameter]
    public LivestreamStateService? LivestreamState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await SafeInitializeAsync();
    }
    
    private async Task SafeInitializeAsync()
    {
        try
        {
            await DebugService.Initialize();
            await DebugService.LogAsync("MainLayout initialized");
            
            if (LivestreamState != null)
            {
                // Unregister any existing handlers to prevent duplicates
                LivestreamState.OnLivestreamStatusChanged -= HandleLivestreamStatusChanged;
                // Register the event handler
                LivestreamState.OnLivestreamStatusChanged += HandleLivestreamStatusChanged;
                await DebugService.LogAsync("Registered livestream state handler");
            }
            else
            {
                await DebugService.LogAsync("WARNING: LivestreamState is null in MainLayout");
            }

            // Reduced polling interval to avoid excessive refreshes
            refreshTimer = new System.Threading.Timer(async _ =>
            {
                try
                {
                    await RefreshLivestreams(force: false);
                    await InvokeAsync(() => 
                    {
                        try 
                        {
                            StateHasChanged();
                        }
                        catch (Exception ex) 
                        {
                            // Log but swallow exceptions in StateHasChanged
                            DebugService.LogAsync($"Error in StateHasChanged: {ex.Message}").GetAwaiter().GetResult();
                        }
                    });
                }
                catch (Exception ex)
                {
                    await DebugService.LogAsync($"Error in timer refresh: {ex.Message}");
                }
            }, null, TimeSpan.Zero, TimeSpan.FromSeconds(30)); // Changed from 15 to 30 seconds

            await RefreshLivestreams(force: true);
            await DebugService.LogAsync("Initial livestream refresh completed");
        }
        catch (Exception ex)
        {
            await DebugService.LogAsync($"Error in MainLayout initialization: {ex.Message}");
        }
    }

    private void HandleLivestreamStatusChanged(object? sender, EventArgs e)
    {
        // Always use InvokeAsync to ensure we're on the UI thread
        _ = InvokeAsync(async () => 
        {
            try
            {
                await DebugService.LogAsync("HandleLivestreamStatusChanged event received");
                await RefreshLivestreams(force: true);
                
                try {
                    StateHasChanged();
                }
                catch (Exception ex) {
                    // Log but swallow exceptions in StateHasChanged
                    await DebugService.LogAsync($"Error in StateHasChanged: {ex.Message}");
                }
                
                await DebugService.LogAsync("HandleLivestreamStatusChanged completed successfully");
            }
            catch (Exception ex)
            {
                await DebugService.LogAsync($"Error in HandleLivestreamStatusChanged: {ex.Message}");
            }
        });
    }

    private async Task RefreshLivestreams(bool force = false)
    {
        try
        {
            var now = DateTimeOffset.UtcNow;
            if (!force && (now - lastRefreshTime).TotalSeconds < 10) // Increased threshold from 5 to 10 seconds
            {
                return;
            }

            await JS.InvokeVoidAsync("console.log", "Refreshing livestreams list...");

            if (force)
            {
                await JS.InvokeVoidAsync("console.log", "Forced refresh - skipping cache");
            }

            var allStreams = await LivestreamService.GetListAsync();
            lastRefreshTime = DateTimeOffset.UtcNow;

            // Safety checks
            if (allStreams == null)
            {
                await DebugService.LogAsync("Warning: GetListAsync returned null");
                return;
            }

            await JS.InvokeVoidAsync("console.log", $"Total streams: {allStreams.Count}");

            // Safer logging with null checks
            foreach (var stream in allStreams)
            {
                await JS.InvokeVoidAsync("console.log",
                    $"Stream ID: {stream.Id}, Status: {stream.StreamStatus} ({(int)stream.StreamStatus}), " +
                    $"Teams: '{stream.HomeTeam ?? "null"}' vs '{stream.AwayTeam ?? "null"}'");
            }

            var newLiveStreams = allStreams
                .Where(l => l.StreamStatus == StreamStatus.Live)
                .OrderByDescending(l => l.Id)
                .ToList();

            bool hasChanged = newLiveStreams.Count != activeLivestreams.Count ||
                              newLiveStreams.Any(newStream => !activeLivestreams.Any(oldStream => oldStream.Id == newStream.Id));

            if (hasChanged)
            {
                await JS.InvokeVoidAsync("console.log", $"Livestream list has changed, updating UI");
                activeLivestreams = newLiveStreams;
                
                try {
                    await InvokeAsync(StateHasChanged);
                }
                catch (Exception ex) {
                    // Log but swallow exceptions in StateHasChanged
                    await DebugService.LogAsync($"Error in StateHasChanged during refresh: {ex.Message}");
                }
            }

            await JS.InvokeVoidAsync("console.log", $"Found {activeLivestreams.Count} LIVE streams");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"Error fetching livestreams: {ex.Message}");
            await DebugService.LogAsync($"Error fetching livestreams: {ex.Message}");
        }
    }

    private void NavigateToLivestream(string livestreamId)
    {
        var url = $"/livestream/{livestreamId}";
        JS.InvokeVoidAsync("console.log", $"Navigating to livestream: {url}");
        NavigationManager.NavigateTo(url, forceLoad: true);
    }

    private async Task ShowNoLivestreamsNotification()
    {
        await JS.InvokeVoidAsync("console.log", "No active livestreams to navigate to");
        await JS.InvokeVoidAsync("showBannerNotification", "No active livestreams available at the moment. Please check back later.");
    }

    public void Dispose()
    {
        try
        {
            // Use local variable to avoid race conditions
            var timer = refreshTimer;
            if (timer != null)
            {
                refreshTimer = null;
                timer.Dispose();
            }

            // Only unsubscribe if LivestreamState is not null
            if (LivestreamState != null)
            {
                LivestreamState.OnLivestreamStatusChanged -= HandleLivestreamStatusChanged;
            }
        }
        catch (Exception ex)
        {
            // Log but can't do much else in Dispose
            Console.WriteLine($"Error in Dispose: {ex.Message}");
        }
    }
}