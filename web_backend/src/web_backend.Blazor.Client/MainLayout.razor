@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@using web_backend.Blazor.Client.Services
@using web_backend.Livestreams
@using System.Linq
@using Microsoft.AspNetCore.Components.Web
@using web_backend.Blazor.Client.Pages.Components
@using web_backend.Enums
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ILivestreamAppService LivestreamService
@inject IJSRuntime JS
@implements IDisposable

<HeadContent>
    <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
    <script src="js/hlsPlayer.js"></script>
    <script src="js/notifications.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
</HeadContent>

<div class="vss-page">
    <header class="vss-header navbar navbar-expand-lg">
        <!-- Logo -->
        <a class="vss-header__logo navbar-brand" href="/landing">
            <img src="/images/varsitylogoempty.jpg" alt="VSS Company Header Logo" width="120" />
        </a>

        <!-- Navbar Toggler for Mobile View -->
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#vssNavbar" aria-controls="vssNavbar" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <!-- Navigation Bar with Links and Dropdowns -->
        <nav class="collapse navbar-collapse vss-header" id="vssNavbar">
            <ul class="vss-nav navbar-nav me-auto mb-2 mb-lg-0">
                <li class="vss-nav__item nav-item">
                    <a class="vss-nav__link nav-link" href="/landing">
                        Home
                        <svg><rect x="0" y="0" width="100%" height="100%"></rect></svg>
                    </a>
                </li>

                <li class="vss-nav__item nav-item">
                    @if (authState != null && authState.User.Identity?.IsAuthenticated == true)
                    {
                        @if (activeLivestreams != null && activeLivestreams.Any())
                        {
                            <div class="dropdown">
                                <a class="vss-nav__link nav-link dropdown-toggle" href="#" id="livestreamDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    Livestreams (@activeLivestreams.Count)
                                    <svg><rect x="0" y="0" width="100%" height="100%"></rect></svg>
                                </a>
                                <ul class="vss-dropdown dropdown-menu" aria-labelledby="livestreamDropdown">
                                    @foreach (var stream in activeLivestreams)
                                    {
                                        <li class="vss-dropdown__item">
                                            <a class="vss-dropdown__link dropdown-item" href="/livestream/@stream.Id" @onclick="@(() => NavigateToLivestream(stream.Id.ToString()))" @onclick:preventDefault>
                                                @(!string.IsNullOrEmpty(stream.HomeTeam) && !string.IsNullOrEmpty(stream.AwayTeam)
                                                    ? $"{stream.HomeTeam} vs {stream.AwayTeam}"
                                                    : $"Livestream {stream.Id.ToString().Substring(0, 8)}")
                                                <span class="badge bg-danger">LIVE</span>
                                            </a>
                                        </li>
                                    }
                                </ul>
                            </div>
                        }
                        else
                        {
                            <a class="vss-nav__link nav-link" href="#" @onclick="ShowNoLivestreamsNotification" @onclick:preventDefault>
                                Livestreams
                                <svg><rect x="0" y="0" width="100%" height="100%"></rect></svg>
                            </a>
                        }
                    }
                    else
                    {
                        <a class="vss-nav__link nav-link" href="#" @onclick="RedirectToLogin" @onclick:preventDefault>
                            Livestreams
                            <svg><rect x="0" y="0" width="100%" height="100%"></rect></svg>
                        </a>
                    }
                </li>


                <li class="vss-nav__item nav-item">
                    <a class="vss-nav__link nav-link" href="/schedule">
                        Sport Schedules
                        <svg><rect x="0" y="0" width="100%" height="100%"></rect></svg>
                    </a>
                </li>
                <li class="vss-nav__item nav-item">
                    <a class="vss-nav__link nav-link" href="/games">
                        Games
                        <svg><rect x="0" y="0" width="100%" height="100%"></rect></svg>
                    </a>
                </li>
                <li class="vss-nav__item nav-item">
                    <a class="vss-nav__link nav-link" href="/contact">
                        Contact Us
                        <svg><rect x="0" y="0" width="100%" height="100%"></rect></svg>
                    </a>
                </li>

                @if (authState != null && authState.User.IsInRole("admin"))
                {
                    <li class="vss-nav__item nav-item dropdown">
                        <a class="vss-nav__link nav-link dropdown-toggle" href="#" id="adminDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            Admin
                            <svg><rect x="0" y="0" width="100%" height="100%"></rect></svg>
                        </a>
                        <ul class="vss-dropdown dropdown-menu" aria-labelledby="adminDropdown">
                            <li class="vss-dropdown__item">
                                <a class="vss-dropdown__link dropdown-item" href="/admin/game-schedule">
                                    <i class="bi bi-calendar-week me-2"></i>Game Schedule Management
                                </a>
                            </li>
                            <li class="vss-dropdown__item">
                                <a class="vss-dropdown__link dropdown-item" href="admin/create-livestream">
                                    <i class="bi bi-broadcast me-2"></i>Create Livestream
                                </a>
                            </li>
                            <li class="vss-dropdown__item">
                                <a class="vss-dropdown__link dropdown-item" href="/admin/manage-livestreams">
                                    <i class="bi bi-list-check me-2"></i>Manage Livestreams
                                </a>
                            </li>
                            <li class="vss-dropdown__item">
                                <a class="vss-dropdown__link dropdown-item" href="/admin/games/create">
                                    <i class="bi bi-film me-2"></i>Upload Game
                                </a>
                            </li>
                            <li class="vss-dropdown__item">
                                <a class="vss-dropdown__link dropdown-item" href="/admin/scoreboards">
                                    <i class="bi bi-display me-2"></i>Scoreboards
                                </a>
                            </li>
                            <li class="vss-dropdown__item">
                                <a class="vss-dropdown__link dropdown-item" href="/admin/manage-scoreboard">
                                    <i class="bi bi-stopwatch me-2"></i>Manage Scoreboard
                                </a>
                            </li>
                        </ul>
                    </li>
                }
            </ul>

            <div class="vss-auth d-flex">
                @if (authState == null)
                {
                    <span class="vss-auth__username navbar-text me-3">Loading...</span>
                }
                else if (authState.User.Identity?.IsAuthenticated ?? false)
                {
                    <span class="vss-auth__username navbar-text me-3">
                        Hello, @GetUserDisplayName(authState.User)
                    </span>
                    <a class="vss-auth__link nav-link" href="#" @onclick="LogoutClick" @onclick:preventDefault>Logout</a>
                }
                else
                {
                    <a class="vss-auth__button btn me-3" href="#" @onclick="LoginClick" @onclick:preventDefault>
                        Login
                        <svg><rect x="0" y="0" width="100%" height="100%"></rect></svg>
                    </a>
                    <a class="vss-auth__button btn" href="#" @onclick="RegisterClick" @onclick:preventDefault>
                        Register
                        <svg><rect x="0" y="0" width="100%" height="100%"></rect></svg>
                    </a>
                }
            </div>
        </nav>
    </header>

    <!-- Livestream Notification Banner (will be shown/hidden via JS) -->
    <div id="livestream-banner" class="alert alert-info text-center mb-0 py-3" style="display: none; border-radius: 0;">
        <i class="bi bi-info-circle-fill me-2"></i>
        <span id="livestream-banner-message">No active livestreams available at the moment. Please check back later.</span>
        <button type="button" class="btn-close float-end" onclick="document.getElementById('livestream-banner').style.display='none'"></button>
    </div>

    <!-- Main Content Area -->
    <main class="vss-main">
        @Body
    </main>
</div>

@code {
    private const string ApiBaseUrl = "https://vss-backend-api-fmbjgachhph9byce.westus2-01.azurewebsites.net";

    private AuthenticationState? authState;
    private List<LivestreamDto> activeLivestreams = new();
    private System.Threading.Timer? refreshTimer;
    private DateTimeOffset lastRefreshTime = DateTimeOffset.MinValue;

    [CascadingParameter] public LivestreamStateService? LivestreamState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (LivestreamState != null)
        {
            LivestreamState.OnLivestreamStatusChanged += HandleLivestreamStatusChanged;
        }

        refreshTimer = new System.Threading.Timer(async _ =>
        {
            await RefreshLivestreams(false);
            await InvokeAsync(StateHasChanged);
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(15));

        await RefreshLivestreams(true);
    }

    private async void HandleLivestreamStatusChanged(object? sender, EventArgs e)
    {
        await RefreshLivestreams(true);
        await InvokeAsync(StateHasChanged);
    }

    private async Task RefreshLivestreams(bool force)
    {
        try
        {
            var now = DateTimeOffset.UtcNow;
            if (!force && (now - lastRefreshTime).TotalSeconds < 5) return;

            var allStreams = await LivestreamService.GetListAsync();
            lastRefreshTime = DateTimeOffset.UtcNow;

            var newLiveStreams = allStreams
                .Where(l => l.StreamStatus == StreamStatus.Live)
                .OrderByDescending(l => l.Id)
                .ToList();

            bool changed = newLiveStreams.Count != activeLivestreams.Count ||
                            newLiveStreams.Any(n => !activeLivestreams.Any(o => o.Id == n.Id));
            if (changed)
            {
                activeLivestreams = newLiveStreams;
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"Error fetching livestreams: {ex.Message}");
        }
    }

    private void NavigateToLivestream(string id) => NavigationManager.NavigateTo($"/livestream/{id}", true);

    private async Task ShowNoLivestreamsNotification()
    {
        await JS.InvokeVoidAsync("showBannerNotification", "No active livestreams available at the moment. Please check back later.");
    }

    private void LoginClick()
    {
        var returnUrl = Uri.EscapeDataString(NavigationManager.Uri);
        NavigationManager.NavigateTo($"{ApiBaseUrl}/Account/Login?returnUrl={returnUrl}", true);
    }

    private void RegisterClick()
    {
        var returnUrl = Uri.EscapeDataString(NavigationManager.Uri);
        NavigationManager.NavigateTo($"{ApiBaseUrl}/Account/Register?returnUrl={returnUrl}", true);
    }

    private async Task LogoutClick()
    {
        await JS.InvokeVoidAsync("authHelpers.clearAuthTokens");
        NavigationManager.NavigateTo("/authentication/logout", true);
    }

    private void RedirectToLogin()
    {
        var returnUrl = Uri.EscapeDataString(NavigationManager.Uri);
        NavigationManager.NavigateTo($"{ApiBaseUrl}/Account/Login?returnUrl={returnUrl}", true);
    }


    public void Dispose()
    {
        refreshTimer?.Dispose();
        if (LivestreamState != null)
        {
            LivestreamState.OnLivestreamStatusChanged -= HandleLivestreamStatusChanged;
        }
    }

    private static string GetUserDisplayName(System.Security.Claims.ClaimsPrincipal user)
    {
        return user.FindFirst("name")?.Value ??
               user.Identity?.Name ??
               user.FindFirst(System.Security.Claims.ClaimTypes.Name)?.Value ??
               user.FindFirst(System.Security.Claims.ClaimTypes.GivenName)?.Value ??
               user.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value ??
               user.FindFirst("preferred_username")?.Value ?? "User";
    }
}
